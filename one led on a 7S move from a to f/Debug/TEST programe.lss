
TEST programe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006a2  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00000e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb7  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000580  00000000  00000000  00001e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000865  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000665  00000000  00000000  0000319f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  8a:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
SSD_Type SSD2 ={SSD_COMMON_CATHODE,SSD_PORTA,SSD_PORTB,7};	
SW_Type SW1 = {SW_PORTC,0,SW_PULL_DOWN};
	
void App_init(void)
{
	SSD_voidInitialDataPort(SSD1);
  92:	80 91 62 00 	lds	r24, 0x0062
  96:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD1);
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SSD_voidEnable>
	SSD_voidInitialDataPort(SSD2);
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD2);
  aa:	80 91 61 00 	lds	r24, 0x0061
  ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SSD_voidEnable>
	SW_VoidInit(SW1);
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	0e 94 70 00 	call	0xe0	; 0xe0 <SW_VoidInit>
}
  ba:	08 95       	ret

000000bc <App_start>:
void App_start(void)
{
	uint8_t i =0;
	while(1)
	{
		for(i =0 ; i <=5;i++)
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0
		{
			SSD_voidSendNumber(SSD1,i);
  c0:	80 91 62 00 	lds	r24, 0x0062
  c4:	6c 2f       	mov	r22, r28
  c6:	0e 94 48 01 	call	0x290	; 0x290 <SSD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <App_start+0x12>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <App_start+0x18>
  d4:	00 00       	nop
void App_start(void)
{
	uint8_t i =0;
	while(1)
	{
		for(i =0 ; i <=5;i++)
  d6:	cf 5f       	subi	r28, 0xFF	; 255
  d8:	c6 30       	cpi	r28, 0x06	; 6
  da:	90 f3       	brcs	.-28     	; 0xc0 <App_start+0x4>
  dc:	cd 2f       	mov	r28, r29
  de:	f0 cf       	rjmp	.-32     	; 0xc0 <App_start+0x4>

000000e0 <SW_VoidInit>:
#include "../../MCAL/DIO Driver/DIO_interface.h"

void SW_VoidInit(SW_Type SW)
{
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT,LOW};
	DIO_VoidSetPinDir(PIN);
  e0:	8f 71       	andi	r24, 0x1F	; 31
  e2:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
}
  e6:	08 95       	ret

000000e8 <SW_Uint8GetPressed>:

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
  e8:	cf 93       	push	r28
	uint8_t Get_Pressed = SW_NOT_PRESSED;
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
  ea:	c8 2f       	mov	r28, r24
  ec:	cf 71       	andi	r28, 0x1F	; 31
	if (SW.Pull_State == SW_PULL_DOWN)
  ee:	85 fd       	sbrc	r24, 5
  f0:	0d c0       	rjmp	.+26     	; 0x10c <SW_Uint8GetPressed+0x24>
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_Uint8ReadPin>
  f8:	88 23       	and	r24, r24
  fa:	a9 f0       	breq	.+42     	; 0x126 <SW_Uint8GetPressed+0x3e>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (HIGH == DIO_Uint8ReadPin(PIN))
  fc:	8c 2f       	mov	r24, r28
  fe:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 f0       	breq	.+36     	; 0x12c <SW_Uint8GetPressed+0x44>
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	10 c0       	rjmp	.+32     	; 0x12c <SW_Uint8GetPressed+0x44>
			Get_Pressed = SW_PRESSED;
		}
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_Uint8ReadPin>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	51 f0       	breq	.+20     	; 0x12a <SW_Uint8GetPressed+0x42>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (LOW == DIO_Uint8ReadPin(PIN))
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	88 23       	and	r24, r24
 120:	29 f0       	breq	.+10     	; 0x12c <SW_Uint8GetPressed+0x44>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	03 c0       	rjmp	.+6      	; 0x12c <SW_Uint8GetPressed+0x44>
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
	if (SW.Pull_State == SW_PULL_DOWN)
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 c0       	rjmp	.+2      	; 0x12c <SW_Uint8GetPressed+0x44>
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 12a:	90 e0       	ldi	r25, 0x00	; 0
		{
			Get_Pressed = SW_PRESSED;
		}
	}
	return Get_Pressed; 
}
 12c:	89 2f       	mov	r24, r25
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LED_Init>:
#include "../../utilities/STD_Types.h"
#include "../../MCAL/DIO Driver/DIO_interface.h"
#include "LED_interface.h"

void LED_Init(LED_Type LED)
{
 132:	cf 93       	push	r28
 134:	28 2f       	mov	r18, r24
 136:	23 70       	andi	r18, 0x03	; 3
 138:	98 2f       	mov	r25, r24
 13a:	96 95       	lsr	r25
 13c:	96 95       	lsr	r25
 13e:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 140:	85 ff       	sbrs	r24, 5
 142:	0d c0       	rjmp	.+26     	; 0x15e <LED_Init+0x2c>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 144:	c9 2f       	mov	r28, r25
 146:	cc 0f       	add	r28, r28
 148:	cc 0f       	add	r28, r28
 14a:	c2 2b       	or	r28, r18
 14c:	c0 62       	ori	r28, 0x20	; 32
 14e:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 156:	8c 2f       	mov	r24, r28
 158:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 15c:	0c c0       	rjmp	.+24     	; 0x176 <LED_Init+0x44>
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 15e:	c9 2f       	mov	r28, r25
 160:	c7 70       	andi	r28, 0x07	; 7
 162:	cc 0f       	add	r28, r28
 164:	cc 0f       	add	r28, r28
 166:	c2 2b       	or	r28, r18
 168:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 170:	8c 2f       	mov	r24, r28
 172:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
	}
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <LED_On>:

void LED_On(LED_Type LED)
{
 17a:	28 2f       	mov	r18, r24
 17c:	23 70       	andi	r18, 0x03	; 3
 17e:	98 2f       	mov	r25, r24
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
 184:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 186:	85 ff       	sbrs	r24, 5
 188:	08 c0       	rjmp	.+16     	; 0x19a <LED_On+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 18a:	99 0f       	add	r25, r25
 18c:	99 0f       	add	r25, r25
 18e:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 190:	82 2f       	mov	r24, r18
 192:	80 66       	ori	r24, 0x60	; 96
 194:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 198:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 19a:	97 70       	andi	r25, 0x07	; 7
 19c:	99 0f       	add	r25, r25
 19e:	99 0f       	add	r25, r25
 1a0:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1a2:	82 2f       	mov	r24, r18
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 1aa:	08 95       	ret

000001ac <LED_Off>:
	}
}

void LED_Off(LED_Type LED)
{
 1ac:	28 2f       	mov	r18, r24
 1ae:	23 70       	andi	r18, 0x03	; 3
 1b0:	98 2f       	mov	r25, r24
 1b2:	96 95       	lsr	r25
 1b4:	96 95       	lsr	r25
 1b6:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 1b8:	85 ff       	sbrs	r24, 5
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <LED_Off+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1bc:	99 0f       	add	r25, r25
 1be:	99 0f       	add	r25, r25
 1c0:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1c2:	82 2f       	mov	r24, r18
 1c4:	80 62       	ori	r24, 0x20	; 32
 1c6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 1ca:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 1cc:	97 70       	andi	r25, 0x07	; 7
 1ce:	99 0f       	add	r25, r25
 1d0:	99 0f       	add	r25, r25
 1d2:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1d4:	82 2f       	mov	r24, r18
 1d6:	80 66       	ori	r24, 0x60	; 96
 1d8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 1dc:	08 95       	ret

000001de <LED_Tog>:
	}
}

void LED_Tog(LED_Type LED)
{
	DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1de:	8f 71       	andi	r24, 0x1F	; 31
	DIO_VoidTogglePin(PIN);
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <DIO_VoidTogglePin>
}
 1e6:	08 95       	ret

000001e8 <LED_Init_Port>:
	//Delay(delay):
}*/

void LED_Init_Port(uint8_t Port)
{
	DIO_VoidSetPortDir(Port,PORT_OUT);
 1e8:	6f ef       	ldi	r22, 0xFF	; 255
 1ea:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_VoidSetPortDir>
 1ee:	08 95       	ret

000001f0 <SSD_voidInitialDataPort>:



void SSD_voidInitialDataPort( SSD_Type SSD )
{
	DIO_VoidSetPortDir(SSD.DataPort,PORT_OUT);
 1f0:	86 95       	lsr	r24
 1f2:	83 70       	andi	r24, 0x03	; 3
 1f4:	6f ef       	ldi	r22, 0xFF	; 255
 1f6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_VoidSetPortDir>
}
 1fa:	08 95       	ret

000001fc <SSD_voidEnable>:
void SSD_voidEnable( SSD_Type SSD)
{
 1fc:	cf 93       	push	r28
 1fe:	98 2f       	mov	r25, r24
 200:	96 95       	lsr	r25
 202:	96 95       	lsr	r25
 204:	96 95       	lsr	r25
 206:	93 70       	andi	r25, 0x03	; 3
 208:	c8 2f       	mov	r28, r24
 20a:	c2 95       	swap	r28
 20c:	c6 95       	lsr	r28
 20e:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 210:	80 fd       	sbrc	r24, 0
 212:	0c c0       	rjmp	.+24     	; 0x22c <SSD_voidEnable+0x30>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 214:	cc 0f       	add	r28, r28
 216:	cc 0f       	add	r28, r28
 218:	c9 2b       	or	r28, r25
 21a:	c0 62       	ori	r28, 0x20	; 32
 21c:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 21e:	8c 2f       	mov	r24, r28
 220:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);	
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 22a:	0b c0       	rjmp	.+22     	; 0x242 <SSD_voidEnable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 22c:	cc 0f       	add	r28, r28
 22e:	cc 0f       	add	r28, r28
 230:	93 70       	andi	r25, 0x03	; 3
 232:	c9 2b       	or	r28, r25
 234:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 23c:	8c 2f       	mov	r24, r28
 23e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
	}
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <SSD_voidDisable>:
void SSD_voidDisable( SSD_Type SSD)
{
 246:	cf 93       	push	r28
 248:	98 2f       	mov	r25, r24
 24a:	96 95       	lsr	r25
 24c:	96 95       	lsr	r25
 24e:	96 95       	lsr	r25
 250:	93 70       	andi	r25, 0x03	; 3
 252:	c8 2f       	mov	r28, r24
 254:	c2 95       	swap	r28
 256:	c6 95       	lsr	r28
 258:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 25a:	80 fd       	sbrc	r24, 0
 25c:	0b c0       	rjmp	.+22     	; 0x274 <SSD_voidDisable+0x2e>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 25e:	cc 0f       	add	r28, r28
 260:	cc 0f       	add	r28, r28
 262:	c9 2b       	or	r28, r25
 264:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 26c:	8c 2f       	mov	r24, r28
 26e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
 272:	0c c0       	rjmp	.+24     	; 0x28c <SSD_voidDisable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 274:	cc 0f       	add	r28, r28
 276:	cc 0f       	add	r28, r28
 278:	93 70       	andi	r25, 0x03	; 3
 27a:	c9 2b       	or	r28, r25
 27c:	c0 62       	ori	r28, 0x20	; 32
 27e:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 280:	8c 2f       	mov	r24, r28
 282:	0e 94 6f 01 	call	0x2de	; 0x2de <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 f5 01 	call	0x3ea	; 0x3ea <DIO_VoidWritePin>
	}
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <SSD_voidSendNumber>:
void SSD_voidSendNumber( SSD_Type SSD,uint8_t Number)
{
 290:	28 2f       	mov	r18, r24
 292:	26 95       	lsr	r18
 294:	23 70       	andi	r18, 0x03	; 3
	if (SSD.Type == SSD_COMMON_CATHODE)
 296:	80 fd       	sbrc	r24, 0
 298:	0d c0       	rjmp	.+26     	; 0x2b4 <SSD_voidSendNumber+0x24>
	{
		DIO_VoidWritePort(SSD.DataPort,Numbers[Number%10]);
 29a:	86 2f       	mov	r24, r22
 29c:	6a e0       	ldi	r22, 0x0A	; 10
 29e:	0e 94 43 03 	call	0x686	; 0x686 <__udivmodqi4>
 2a2:	e3 e6       	ldi	r30, 0x63	; 99
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e9 0f       	add	r30, r25
 2a8:	f1 1d       	adc	r31, r1
 2aa:	82 2f       	mov	r24, r18
 2ac:	60 81       	ld	r22, Z
 2ae:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_VoidWritePort>
 2b2:	08 95       	ret
	}
	else if (SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_VoidWritePort(SSD.DataPort,~Numbers[Number%10]);
 2b4:	86 2f       	mov	r24, r22
 2b6:	6a e0       	ldi	r22, 0x0A	; 10
 2b8:	0e 94 43 03 	call	0x686	; 0x686 <__udivmodqi4>
 2bc:	e3 e6       	ldi	r30, 0x63	; 99
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e9 0f       	add	r30, r25
 2c2:	f1 1d       	adc	r31, r1
 2c4:	60 81       	ld	r22, Z
 2c6:	60 95       	com	r22
 2c8:	82 2f       	mov	r24, r18
 2ca:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_VoidWritePort>
 2ce:	08 95       	ret

000002d0 <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 2d0:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	
	App_start();
 2d4:	0e 94 5e 00 	call	0xbc	; 0xbc <App_start>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	08 95       	ret

000002de <DIO_VoidSetPinDir>:
#include "DIO_interface.h"


//Function to control Pins 
void DIO_VoidSetPinDir(DIO_Type PIN)
{
 2de:	98 2f       	mov	r25, r24
 2e0:	96 95       	lsr	r25
 2e2:	96 95       	lsr	r25
 2e4:	97 70       	andi	r25, 0x07	; 7
	switch (PIN.Port)
 2e6:	28 2f       	mov	r18, r24
 2e8:	23 70       	andi	r18, 0x03	; 3
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	22 30       	cpi	r18, 0x02	; 2
 2ee:	31 05       	cpc	r19, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_VoidSetPinDir+0x16>
 2f2:	41 c0       	rjmp	.+130    	; 0x376 <DIO_VoidSetPinDir+0x98>
 2f4:	23 30       	cpi	r18, 0x03	; 3
 2f6:	31 05       	cpc	r19, r1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <DIO_VoidSetPinDir+0x1e>
 2fa:	5a c0       	rjmp	.+180    	; 0x3b0 <DIO_VoidSetPinDir+0xd2>
 2fc:	21 30       	cpi	r18, 0x01	; 1
 2fe:	31 05       	cpc	r19, r1
 300:	e9 f0       	breq	.+58     	; 0x33c <DIO_VoidSetPinDir+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Dir != 0)
 302:	85 ff       	sbrs	r24, 5
 304:	0d c0       	rjmp	.+26     	; 0x320 <DIO_VoidSetPinDir+0x42>
			{
				SET_BIT(DDRA,PIN.Num);
 306:	4a b3       	in	r20, 0x1a	; 26
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_VoidSetPinDir+0x36>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	9a 95       	dec	r25
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_VoidSetPinDir+0x32>
 318:	cb 01       	movw	r24, r22
 31a:	84 2b       	or	r24, r20
 31c:	8a bb       	out	0x1a, r24	; 26
 31e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,PIN.Num);
 320:	4a b3       	in	r20, 0x1a	; 26
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_VoidSetPinDir+0x50>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	9a 95       	dec	r25
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_VoidSetPinDir+0x4c>
 332:	cb 01       	movw	r24, r22
 334:	80 95       	com	r24
 336:	84 23       	and	r24, r20
 338:	8a bb       	out	0x1a, r24	; 26
 33a:	08 95       	ret
			}
			break;
		}
		case DIO_PORTB :
		{
			if(PIN.Dir != 0)
 33c:	85 ff       	sbrs	r24, 5
 33e:	0d c0       	rjmp	.+26     	; 0x35a <DIO_VoidSetPinDir+0x7c>
			{
				SET_BIT(DDRB,PIN.Num);
 340:	47 b3       	in	r20, 0x17	; 23
 342:	21 e0       	ldi	r18, 0x01	; 1
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	b9 01       	movw	r22, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_VoidSetPinDir+0x70>
 34a:	66 0f       	add	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	9a 95       	dec	r25
 350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_VoidSetPinDir+0x6c>
 352:	cb 01       	movw	r24, r22
 354:	84 2b       	or	r24, r20
 356:	87 bb       	out	0x17, r24	; 23
 358:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,PIN.Num);
 35a:	47 b3       	in	r20, 0x17	; 23
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_VoidSetPinDir+0x8a>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	9a 95       	dec	r25
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_VoidSetPinDir+0x86>
 36c:	cb 01       	movw	r24, r22
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	87 bb       	out	0x17, r24	; 23
 374:	08 95       	ret
			}
			break;
		}
		case DIO_PORTC :
		{
			if(PIN.Dir != 0)
 376:	85 ff       	sbrs	r24, 5
 378:	0d c0       	rjmp	.+26     	; 0x394 <DIO_VoidSetPinDir+0xb6>
			{
				SET_BIT(DDRC,PIN.Num);
 37a:	44 b3       	in	r20, 0x14	; 20
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_VoidSetPinDir+0xaa>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	9a 95       	dec	r25
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_VoidSetPinDir+0xa6>
 38c:	cb 01       	movw	r24, r22
 38e:	84 2b       	or	r24, r20
 390:	84 bb       	out	0x14, r24	; 20
 392:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,PIN.Num);
 394:	44 b3       	in	r20, 0x14	; 20
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_VoidSetPinDir+0xc4>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	9a 95       	dec	r25
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_VoidSetPinDir+0xc0>
 3a6:	cb 01       	movw	r24, r22
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	84 bb       	out	0x14, r24	; 20
 3ae:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Dir != 0)
 3b0:	85 ff       	sbrs	r24, 5
 3b2:	0d c0       	rjmp	.+26     	; 0x3ce <DIO_VoidSetPinDir+0xf0>
			{
				SET_BIT(DDRD,PIN.Num);
 3b4:	41 b3       	in	r20, 0x11	; 17
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_VoidSetPinDir+0xe4>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	9a 95       	dec	r25
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_VoidSetPinDir+0xe0>
 3c6:	cb 01       	movw	r24, r22
 3c8:	84 2b       	or	r24, r20
 3ca:	81 bb       	out	0x11, r24	; 17
 3cc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,PIN.Num);
 3ce:	41 b3       	in	r20, 0x11	; 17
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_VoidSetPinDir+0xfe>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	9a 95       	dec	r25
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_VoidSetPinDir+0xfa>
 3e0:	cb 01       	movw	r24, r22
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	81 bb       	out	0x11, r24	; 17
 3e8:	08 95       	ret

000003ea <DIO_VoidWritePin>:
		}		
	}
}

void DIO_VoidWritePin(DIO_Type PIN)
{
 3ea:	98 2f       	mov	r25, r24
 3ec:	96 95       	lsr	r25
 3ee:	96 95       	lsr	r25
 3f0:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 3f2:	28 2f       	mov	r18, r24
 3f4:	23 70       	andi	r18, 0x03	; 3
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	22 30       	cpi	r18, 0x02	; 2
 3fa:	31 05       	cpc	r19, r1
 3fc:	09 f4       	brne	.+2      	; 0x400 <DIO_VoidWritePin+0x16>
 3fe:	41 c0       	rjmp	.+130    	; 0x482 <DIO_VoidWritePin+0x98>
 400:	23 30       	cpi	r18, 0x03	; 3
 402:	31 05       	cpc	r19, r1
 404:	09 f4       	brne	.+2      	; 0x408 <DIO_VoidWritePin+0x1e>
 406:	5a c0       	rjmp	.+180    	; 0x4bc <DIO_VoidWritePin+0xd2>
 408:	21 30       	cpi	r18, 0x01	; 1
 40a:	31 05       	cpc	r19, r1
 40c:	e9 f0       	breq	.+58     	; 0x448 <DIO_VoidWritePin+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Val != 0)
 40e:	86 ff       	sbrs	r24, 6
 410:	0d c0       	rjmp	.+26     	; 0x42c <DIO_VoidWritePin+0x42>
			{
				SET_BIT(PORTA,PIN.Num);
 412:	4b b3       	in	r20, 0x1b	; 27
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	b9 01       	movw	r22, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_VoidWritePin+0x36>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	9a 95       	dec	r25
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_VoidWritePin+0x32>
 424:	cb 01       	movw	r24, r22
 426:	84 2b       	or	r24, r20
 428:	8b bb       	out	0x1b, r24	; 27
 42a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,PIN.Num);
 42c:	4b b3       	in	r20, 0x1b	; 27
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_VoidWritePin+0x50>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	9a 95       	dec	r25
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_VoidWritePin+0x4c>
 43e:	cb 01       	movw	r24, r22
 440:	80 95       	com	r24
 442:	84 23       	and	r24, r20
 444:	8b bb       	out	0x1b, r24	; 27
 446:	08 95       	ret
			}
			break;			
		}
		case DIO_PORTB :
		{
			if(PIN.Val != 0)
 448:	86 ff       	sbrs	r24, 6
 44a:	0d c0       	rjmp	.+26     	; 0x466 <DIO_VoidWritePin+0x7c>
			{
				SET_BIT(PORTB,PIN.Num);
 44c:	48 b3       	in	r20, 0x18	; 24
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	b9 01       	movw	r22, r18
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_VoidWritePin+0x70>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	9a 95       	dec	r25
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_VoidWritePin+0x6c>
 45e:	cb 01       	movw	r24, r22
 460:	84 2b       	or	r24, r20
 462:	88 bb       	out	0x18, r24	; 24
 464:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,PIN.Num);
 466:	48 b3       	in	r20, 0x18	; 24
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	b9 01       	movw	r22, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_VoidWritePin+0x8a>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	9a 95       	dec	r25
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_VoidWritePin+0x86>
 478:	cb 01       	movw	r24, r22
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	88 bb       	out	0x18, r24	; 24
 480:	08 95       	ret
			}
			break;		
		}
		case DIO_PORTC :
		{
			if(PIN.Val != 0)
 482:	86 ff       	sbrs	r24, 6
 484:	0d c0       	rjmp	.+26     	; 0x4a0 <DIO_VoidWritePin+0xb6>
			{
				SET_BIT(PORTC,PIN.Num);
 486:	45 b3       	in	r20, 0x15	; 21
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_VoidWritePin+0xaa>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	9a 95       	dec	r25
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_VoidWritePin+0xa6>
 498:	cb 01       	movw	r24, r22
 49a:	84 2b       	or	r24, r20
 49c:	85 bb       	out	0x15, r24	; 21
 49e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,PIN.Num);
 4a0:	45 b3       	in	r20, 0x15	; 21
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <DIO_VoidWritePin+0xc4>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	9a 95       	dec	r25
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <DIO_VoidWritePin+0xc0>
 4b2:	cb 01       	movw	r24, r22
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Val != 0)
 4bc:	86 ff       	sbrs	r24, 6
 4be:	0d c0       	rjmp	.+26     	; 0x4da <DIO_VoidWritePin+0xf0>
			{
				SET_BIT(PORTD,PIN.Num);
 4c0:	42 b3       	in	r20, 0x12	; 18
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	b9 01       	movw	r22, r18
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_VoidWritePin+0xe4>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	9a 95       	dec	r25
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_VoidWritePin+0xe0>
 4d2:	cb 01       	movw	r24, r22
 4d4:	84 2b       	or	r24, r20
 4d6:	82 bb       	out	0x12, r24	; 18
 4d8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,PIN.Num);
 4da:	42 b3       	in	r20, 0x12	; 18
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_VoidWritePin+0xfe>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	9a 95       	dec	r25
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_VoidWritePin+0xfa>
 4ec:	cb 01       	movw	r24, r22
 4ee:	80 95       	com	r24
 4f0:	84 23       	and	r24, r20
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	08 95       	ret

000004f6 <DIO_VoidTogglePin>:
		}
	}
}

void DIO_VoidTogglePin(DIO_Type PIN)
{
 4f6:	48 2f       	mov	r20, r24
 4f8:	46 95       	lsr	r20
 4fa:	46 95       	lsr	r20
 4fc:	47 70       	andi	r20, 0x07	; 7
	switch(PIN.Port)
 4fe:	83 70       	andi	r24, 0x03	; 3
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	91 05       	cpc	r25, r1
 506:	f1 f0       	breq	.+60     	; 0x544 <DIO_VoidTogglePin+0x4e>
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	91 05       	cpc	r25, r1
 50c:	39 f1       	breq	.+78     	; 0x55c <DIO_VoidTogglePin+0x66>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	91 05       	cpc	r25, r1
 512:	61 f0       	breq	.+24     	; 0x52c <DIO_VoidTogglePin+0x36>
	{
		case DIO_PORTA :
			TOG_BIT(PORTA,PIN.Num);
 514:	5b b3       	in	r21, 0x1b	; 27
 516:	21 e0       	ldi	r18, 0x01	; 1
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	c9 01       	movw	r24, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_VoidTogglePin+0x2c>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	4a 95       	dec	r20
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_VoidTogglePin+0x28>
 526:	85 27       	eor	r24, r21
 528:	8b bb       	out	0x1b, r24	; 27
			break;
 52a:	08 95       	ret
		case DIO_PORTB :
			TOG_BIT(PORTB,PIN.Num);
 52c:	58 b3       	in	r21, 0x18	; 24
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	c9 01       	movw	r24, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_VoidTogglePin+0x44>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	4a 95       	dec	r20
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_VoidTogglePin+0x40>
 53e:	85 27       	eor	r24, r21
 540:	88 bb       	out	0x18, r24	; 24
			break;
 542:	08 95       	ret
		case DIO_PORTC :
			TOG_BIT(PORTC,PIN.Num);
 544:	55 b3       	in	r21, 0x15	; 21
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	c9 01       	movw	r24, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_VoidTogglePin+0x5c>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	4a 95       	dec	r20
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_VoidTogglePin+0x58>
 556:	85 27       	eor	r24, r21
 558:	85 bb       	out	0x15, r24	; 21
			break;
 55a:	08 95       	ret
		case DIO_PORTD :
			TOG_BIT(PORTD,PIN.Num);
 55c:	52 b3       	in	r21, 0x12	; 18
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	c9 01       	movw	r24, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_VoidTogglePin+0x74>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	4a 95       	dec	r20
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_VoidTogglePin+0x70>
 56e:	85 27       	eor	r24, r21
 570:	82 bb       	out	0x12, r24	; 18
 572:	08 95       	ret

00000574 <DIO_Uint8ReadPin>:
			break;	
	}	
}

uint8_t DIO_Uint8ReadPin(DIO_Type PIN)
{
 574:	98 2f       	mov	r25, r24
 576:	96 95       	lsr	r25
 578:	96 95       	lsr	r25
 57a:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 57c:	83 70       	andi	r24, 0x03	; 3
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	22 30       	cpi	r18, 0x02	; 2
 584:	31 05       	cpc	r19, r1
 586:	e1 f0       	breq	.+56     	; 0x5c0 <DIO_Uint8ReadPin+0x4c>
 588:	23 30       	cpi	r18, 0x03	; 3
 58a:	31 05       	cpc	r19, r1
 58c:	21 f1       	breq	.+72     	; 0x5d6 <DIO_Uint8ReadPin+0x62>
 58e:	21 30       	cpi	r18, 0x01	; 1
 590:	31 05       	cpc	r19, r1
 592:	59 f0       	breq	.+22     	; 0x5aa <DIO_Uint8ReadPin+0x36>
	{
		case DIO_PORTA :
			PIN.Val = READ_BIT(PINA,PIN.Num);
 594:	29 b3       	in	r18, 0x19	; 25
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	a9 01       	movw	r20, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_Uint8ReadPin+0x2c>
 59c:	55 95       	asr	r21
 59e:	47 95       	ror	r20
 5a0:	9a 95       	dec	r25
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_Uint8ReadPin+0x28>
 5a4:	ca 01       	movw	r24, r20
 5a6:	81 70       	andi	r24, 0x01	; 1
			break;
 5a8:	08 95       	ret
		case DIO_PORTB :
			PIN.Val = READ_BIT(PINB,PIN.Num);
 5aa:	26 b3       	in	r18, 0x16	; 22
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_Uint8ReadPin+0x42>
 5b2:	55 95       	asr	r21
 5b4:	47 95       	ror	r20
 5b6:	9a 95       	dec	r25
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_Uint8ReadPin+0x3e>
 5ba:	ca 01       	movw	r24, r20
 5bc:	81 70       	andi	r24, 0x01	; 1
			break;
 5be:	08 95       	ret
		case DIO_PORTC :
			PIN.Val = READ_BIT(PINC,PIN.Num);
 5c0:	23 b3       	in	r18, 0x13	; 19
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	a9 01       	movw	r20, r18
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_Uint8ReadPin+0x58>
 5c8:	55 95       	asr	r21
 5ca:	47 95       	ror	r20
 5cc:	9a 95       	dec	r25
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_Uint8ReadPin+0x54>
 5d0:	ca 01       	movw	r24, r20
 5d2:	81 70       	andi	r24, 0x01	; 1
			break;
 5d4:	08 95       	ret
		case DIO_PORTD :
			PIN.Val = READ_BIT(PIND,PIN.Num);
 5d6:	20 b3       	in	r18, 0x10	; 16
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	a9 01       	movw	r20, r18
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_Uint8ReadPin+0x6e>
 5de:	55 95       	asr	r21
 5e0:	47 95       	ror	r20
 5e2:	9a 95       	dec	r25
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_Uint8ReadPin+0x6a>
 5e6:	ca 01       	movw	r24, r20
 5e8:	81 70       	andi	r24, 0x01	; 1
			break;
	}
	return PIN.Val;
}
 5ea:	08 95       	ret

000005ec <DIO_VoidSetPortDir>:


//Function to control Ports
void DIO_VoidSetPortDir(uint8_t Port,uint8_t Port_Dir)
{
	switch(Port)
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	49 f0       	breq	.+18     	; 0x602 <DIO_VoidSetPortDir+0x16>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	28 f0       	brcs	.+10     	; 0x5fe <DIO_VoidSetPortDir+0x12>
 5f4:	82 30       	cpi	r24, 0x02	; 2
 5f6:	39 f0       	breq	.+14     	; 0x606 <DIO_VoidSetPortDir+0x1a>
 5f8:	83 30       	cpi	r24, 0x03	; 3
 5fa:	41 f4       	brne	.+16     	; 0x60c <DIO_VoidSetPortDir+0x20>
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <DIO_VoidSetPortDir+0x1e>
	{
		case DIO_PORTA :
			DDRA = Port_Dir;
 5fe:	6a bb       	out	0x1a, r22	; 26
			break;
 600:	08 95       	ret
		case DIO_PORTB :
			DDRB = Port_Dir;
 602:	67 bb       	out	0x17, r22	; 23
			break;
 604:	08 95       	ret
		case DIO_PORTC :
			DDRC = Port_Dir;
 606:	64 bb       	out	0x14, r22	; 20
			break;
 608:	08 95       	ret
		case DIO_PORTD :
			DDRD = Port_Dir;
 60a:	61 bb       	out	0x11, r22	; 17
 60c:	08 95       	ret

0000060e <DIO_VoidWritePort>:
	}
}

void DIO_VoidWritePort(uint8_t Port,uint8_t Port_Val)
{
	switch(Port)
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	49 f0       	breq	.+18     	; 0x624 <DIO_VoidWritePort+0x16>
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	28 f0       	brcs	.+10     	; 0x620 <DIO_VoidWritePort+0x12>
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	39 f0       	breq	.+14     	; 0x628 <DIO_VoidWritePort+0x1a>
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	41 f4       	brne	.+16     	; 0x62e <DIO_VoidWritePort+0x20>
 61e:	06 c0       	rjmp	.+12     	; 0x62c <DIO_VoidWritePort+0x1e>
	{
		case DIO_PORTA :
			PORTA = Port_Val;
 620:	6b bb       	out	0x1b, r22	; 27
			break;
 622:	08 95       	ret
		case DIO_PORTB :
			PORTB = Port_Val;
 624:	68 bb       	out	0x18, r22	; 24
			break;
 626:	08 95       	ret
		case DIO_PORTC :
			PORTB = Port_Val;
 628:	68 bb       	out	0x18, r22	; 24
			break;
 62a:	08 95       	ret
		case DIO_PORTD :
			PORTD = Port_Val;
 62c:	62 bb       	out	0x12, r22	; 18
 62e:	08 95       	ret

00000630 <DIO_Uint8ReadPort>:
}

uint8_t DIO_Uint8ReadPort(uint8_t Port)
{
	uint8_t val;
	switch(Port)
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	49 f0       	breq	.+18     	; 0x646 <DIO_Uint8ReadPort+0x16>
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	28 f0       	brcs	.+10     	; 0x642 <DIO_Uint8ReadPort+0x12>
 638:	82 30       	cpi	r24, 0x02	; 2
 63a:	39 f0       	breq	.+14     	; 0x64a <DIO_Uint8ReadPort+0x1a>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	41 f4       	brne	.+16     	; 0x650 <DIO_Uint8ReadPort+0x20>
 640:	06 c0       	rjmp	.+12     	; 0x64e <DIO_Uint8ReadPort+0x1e>
	{
		case DIO_PORTA :
			val = PINA;
 642:	99 b3       	in	r25, 0x19	; 25
			break;
 644:	05 c0       	rjmp	.+10     	; 0x650 <DIO_Uint8ReadPort+0x20>
		case DIO_PORTB :
			val = PINB;
 646:	96 b3       	in	r25, 0x16	; 22
			break;
 648:	03 c0       	rjmp	.+6      	; 0x650 <DIO_Uint8ReadPort+0x20>
		case DIO_PORTC :
			val = PINC;
 64a:	93 b3       	in	r25, 0x13	; 19
			break;
 64c:	01 c0       	rjmp	.+2      	; 0x650 <DIO_Uint8ReadPort+0x20>
		case DIO_PORTD :
			val = PIND;
 64e:	90 b3       	in	r25, 0x10	; 16
			break;
	}
	return val;
}
 650:	89 2f       	mov	r24, r25
 652:	08 95       	ret

00000654 <DIO_VoidTogglePort>:

void DIO_VoidTogglePort(uint8_t Port)
{
	switch(Port)
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	59 f0       	breq	.+22     	; 0x66e <DIO_VoidTogglePort+0x1a>
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	28 f0       	brcs	.+10     	; 0x666 <DIO_VoidTogglePort+0x12>
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	59 f0       	breq	.+22     	; 0x676 <DIO_VoidTogglePort+0x22>
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	81 f4       	brne	.+32     	; 0x684 <DIO_VoidTogglePort+0x30>
 664:	0c c0       	rjmp	.+24     	; 0x67e <DIO_VoidTogglePort+0x2a>
	{
		case DIO_PORTA :
			PORTA ^= PORT_HIGH;
 666:	8b b3       	in	r24, 0x1b	; 27
 668:	80 95       	com	r24
 66a:	8b bb       	out	0x1b, r24	; 27
			break;
 66c:	08 95       	ret
		case DIO_PORTB :
			PORTB ^= PORT_HIGH;
 66e:	88 b3       	in	r24, 0x18	; 24
 670:	80 95       	com	r24
 672:	88 bb       	out	0x18, r24	; 24
			break;
 674:	08 95       	ret
		case DIO_PORTC :
			PORTC ^= PORT_HIGH;
 676:	85 b3       	in	r24, 0x15	; 21
 678:	80 95       	com	r24
 67a:	85 bb       	out	0x15, r24	; 21
			break;
 67c:	08 95       	ret
		case DIO_PORTD :
			PORTD ^= PORT_HIGH;
 67e:	82 b3       	in	r24, 0x12	; 18
 680:	80 95       	com	r24
 682:	82 bb       	out	0x12, r24	; 18
 684:	08 95       	ret

00000686 <__udivmodqi4>:
 686:	99 1b       	sub	r25, r25
 688:	79 e0       	ldi	r23, 0x09	; 9
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__udivmodqi4_ep>

0000068c <__udivmodqi4_loop>:
 68c:	99 1f       	adc	r25, r25
 68e:	96 17       	cp	r25, r22
 690:	08 f0       	brcs	.+2      	; 0x694 <__udivmodqi4_ep>
 692:	96 1b       	sub	r25, r22

00000694 <__udivmodqi4_ep>:
 694:	88 1f       	adc	r24, r24
 696:	7a 95       	dec	r23
 698:	c9 f7       	brne	.-14     	; 0x68c <__udivmodqi4_loop>
 69a:	80 95       	com	r24
 69c:	08 95       	ret

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
