
TEST programe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006ac  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00000e88  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f1d  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000580  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000889  00000000  00000000  00002465  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000665  00000000  00000000  0000323b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  8a:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
SSD_Type SSD ={SSD_COMMON_CATHODE,SSD_PORTD,SSD_PORTB,7};	
SW_Type SW1 = {SW_PORTC,0,SW_PULL_DOWN};
	
void App_init(void)
{
	LED_Init(LED1);
  92:	80 91 63 00 	lds	r24, 0x0063
  96:	0e 94 9e 00 	call	0x13c	; 0x13c <LED_Init>
	LED_Init(LED2);
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	0e 94 9e 00 	call	0x13c	; 0x13c <LED_Init>
	SSD_voidInitialDataPort(SSD);
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD);
  aa:	80 91 61 00 	lds	r24, 0x0061
  ae:	0e 94 03 01 	call	0x206	; 0x206 <SSD_voidEnable>
	SW_VoidInit(SW1);
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	0e 94 75 00 	call	0xea	; 0xea <SW_VoidInit>
}
  ba:	08 95       	ret

000000bc <App_start>:

void App_start(void)
{
	uint8_t i =0;
  bc:	c0 e0       	ldi	r28, 0x00	; 0
	while(1)
	{
		if(SW_Uint8GetPressed(SW1))
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	0e 94 79 00 	call	0xf2	; 0xf2 <SW_Uint8GetPressed>
  c6:	88 23       	and	r24, r24
  c8:	d1 f3       	breq	.-12     	; 0xbe <App_start+0x2>
		{
			SSD_voidSendNumber(SSD,i);
  ca:	80 91 61 00 	lds	r24, 0x0061
  ce:	6c 2f       	mov	r22, r28
  d0:	0e 94 4d 01 	call	0x29a	; 0x29a <SSD_voidSendNumber>
			i++;
  d4:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	8f ee       	ldi	r24, 0xEF	; 239
  d8:	99 e4       	ldi	r25, 0x49	; 73
  da:	a2 e0       	ldi	r26, 0x02	; 2
  dc:	81 50       	subi	r24, 0x01	; 1
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	a0 40       	sbci	r26, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <App_start+0x20>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <App_start+0x2a>
  e6:	00 00       	nop
  e8:	ea cf       	rjmp	.-44     	; 0xbe <App_start+0x2>

000000ea <SW_VoidInit>:
#include "../../MCAL/DIO Driver/DIO_interface.h"

void SW_VoidInit(SW_Type SW)
{
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT,LOW};
	DIO_VoidSetPinDir(PIN);
  ea:	8f 71       	andi	r24, 0x1F	; 31
  ec:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
}
  f0:	08 95       	ret

000000f2 <SW_Uint8GetPressed>:

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
  f2:	cf 93       	push	r28
	uint8_t Get_Pressed = SW_NOT_PRESSED;
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
  f4:	c8 2f       	mov	r28, r24
  f6:	cf 71       	andi	r28, 0x1F	; 31
	if (SW.Pull_State == SW_PULL_DOWN)
  f8:	85 fd       	sbrc	r24, 5
  fa:	0d c0       	rjmp	.+26     	; 0x116 <SW_Uint8GetPressed+0x24>
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
  fc:	8c 2f       	mov	r24, r28
  fe:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_Uint8ReadPin>
 102:	88 23       	and	r24, r24
 104:	a9 f0       	breq	.+42     	; 0x130 <SW_Uint8GetPressed+0x3e>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (HIGH == DIO_Uint8ReadPin(PIN))
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <SW_Uint8GetPressed+0x44>
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	10 c0       	rjmp	.+32     	; 0x136 <SW_Uint8GetPressed+0x44>
			Get_Pressed = SW_PRESSED;
		}
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
 116:	8c 2f       	mov	r24, r28
 118:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_Uint8ReadPin>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	51 f0       	breq	.+20     	; 0x134 <SW_Uint8GetPressed+0x42>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (LOW == DIO_Uint8ReadPin(PIN))
 120:	8c 2f       	mov	r24, r28
 122:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	88 23       	and	r24, r24
 12a:	29 f0       	breq	.+10     	; 0x136 <SW_Uint8GetPressed+0x44>
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	03 c0       	rjmp	.+6      	; 0x136 <SW_Uint8GetPressed+0x44>
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
	if (SW.Pull_State == SW_PULL_DOWN)
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 c0       	rjmp	.+2      	; 0x136 <SW_Uint8GetPressed+0x44>
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 134:	90 e0       	ldi	r25, 0x00	; 0
		{
			Get_Pressed = SW_PRESSED;
		}
	}
	return Get_Pressed; 
}
 136:	89 2f       	mov	r24, r25
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <LED_Init>:
#include "../../utilities/STD_Types.h"
#include "../../MCAL/DIO Driver/DIO_interface.h"
#include "LED_interface.h"

void LED_Init(LED_Type LED)
{
 13c:	cf 93       	push	r28
 13e:	28 2f       	mov	r18, r24
 140:	23 70       	andi	r18, 0x03	; 3
 142:	98 2f       	mov	r25, r24
 144:	96 95       	lsr	r25
 146:	96 95       	lsr	r25
 148:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 14a:	85 ff       	sbrs	r24, 5
 14c:	0d c0       	rjmp	.+26     	; 0x168 <LED_Init+0x2c>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 14e:	c9 2f       	mov	r28, r25
 150:	cc 0f       	add	r28, r28
 152:	cc 0f       	add	r28, r28
 154:	c2 2b       	or	r28, r18
 156:	c0 62       	ori	r28, 0x20	; 32
 158:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 160:	8c 2f       	mov	r24, r28
 162:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 166:	0c c0       	rjmp	.+24     	; 0x180 <LED_Init+0x44>
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 168:	c9 2f       	mov	r28, r25
 16a:	c7 70       	andi	r28, 0x07	; 7
 16c:	cc 0f       	add	r28, r28
 16e:	cc 0f       	add	r28, r28
 170:	c2 2b       	or	r28, r18
 172:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
	}
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LED_On>:

void LED_On(LED_Type LED)
{
 184:	28 2f       	mov	r18, r24
 186:	23 70       	andi	r18, 0x03	; 3
 188:	98 2f       	mov	r25, r24
 18a:	96 95       	lsr	r25
 18c:	96 95       	lsr	r25
 18e:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 190:	85 ff       	sbrs	r24, 5
 192:	08 c0       	rjmp	.+16     	; 0x1a4 <LED_On+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 194:	99 0f       	add	r25, r25
 196:	99 0f       	add	r25, r25
 198:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 19a:	82 2f       	mov	r24, r18
 19c:	80 66       	ori	r24, 0x60	; 96
 19e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 1a2:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1a4:	97 70       	andi	r25, 0x07	; 7
 1a6:	99 0f       	add	r25, r25
 1a8:	99 0f       	add	r25, r25
 1aa:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1ac:	82 2f       	mov	r24, r18
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 1b4:	08 95       	ret

000001b6 <LED_Off>:
	}
}

void LED_Off(LED_Type LED)
{
 1b6:	28 2f       	mov	r18, r24
 1b8:	23 70       	andi	r18, 0x03	; 3
 1ba:	98 2f       	mov	r25, r24
 1bc:	96 95       	lsr	r25
 1be:	96 95       	lsr	r25
 1c0:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 1c2:	85 ff       	sbrs	r24, 5
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <LED_Off+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1c6:	99 0f       	add	r25, r25
 1c8:	99 0f       	add	r25, r25
 1ca:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1cc:	82 2f       	mov	r24, r18
 1ce:	80 62       	ori	r24, 0x20	; 32
 1d0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 1d4:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 1d6:	97 70       	andi	r25, 0x07	; 7
 1d8:	99 0f       	add	r25, r25
 1da:	99 0f       	add	r25, r25
 1dc:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1de:	82 2f       	mov	r24, r18
 1e0:	80 66       	ori	r24, 0x60	; 96
 1e2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 1e6:	08 95       	ret

000001e8 <LED_Tog>:
	}
}

void LED_Tog(LED_Type LED)
{
	DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1e8:	8f 71       	andi	r24, 0x1F	; 31
	DIO_VoidTogglePin(PIN);
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	0e 94 80 02 	call	0x500	; 0x500 <DIO_VoidTogglePin>
}
 1f0:	08 95       	ret

000001f2 <LED_Init_Port>:
	//Delay(delay):
}*/

void LED_Init_Port(uint8_t Port)
{
	DIO_VoidSetPortDir(Port,PORT_OUT);
 1f2:	6f ef       	ldi	r22, 0xFF	; 255
 1f4:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_VoidSetPortDir>
 1f8:	08 95       	ret

000001fa <SSD_voidInitialDataPort>:



void SSD_voidInitialDataPort( SSD_Type SSD )
{
	DIO_VoidSetPortDir(SSD.DataPort,PORT_OUT);
 1fa:	86 95       	lsr	r24
 1fc:	83 70       	andi	r24, 0x03	; 3
 1fe:	6f ef       	ldi	r22, 0xFF	; 255
 200:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <DIO_VoidSetPortDir>
}
 204:	08 95       	ret

00000206 <SSD_voidEnable>:
void SSD_voidEnable( SSD_Type SSD)
{
 206:	cf 93       	push	r28
 208:	98 2f       	mov	r25, r24
 20a:	96 95       	lsr	r25
 20c:	96 95       	lsr	r25
 20e:	96 95       	lsr	r25
 210:	93 70       	andi	r25, 0x03	; 3
 212:	c8 2f       	mov	r28, r24
 214:	c2 95       	swap	r28
 216:	c6 95       	lsr	r28
 218:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 21a:	80 fd       	sbrc	r24, 0
 21c:	0c c0       	rjmp	.+24     	; 0x236 <SSD_voidEnable+0x30>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 21e:	cc 0f       	add	r28, r28
 220:	cc 0f       	add	r28, r28
 222:	c9 2b       	or	r28, r25
 224:	c0 62       	ori	r28, 0x20	; 32
 226:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);	
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 234:	0b c0       	rjmp	.+22     	; 0x24c <SSD_voidEnable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 236:	cc 0f       	add	r28, r28
 238:	cc 0f       	add	r28, r28
 23a:	93 70       	andi	r25, 0x03	; 3
 23c:	c9 2b       	or	r28, r25
 23e:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 246:	8c 2f       	mov	r24, r28
 248:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
	}
}
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <SSD_voidDisable>:
void SSD_voidDisable( SSD_Type SSD)
{
 250:	cf 93       	push	r28
 252:	98 2f       	mov	r25, r24
 254:	96 95       	lsr	r25
 256:	96 95       	lsr	r25
 258:	96 95       	lsr	r25
 25a:	93 70       	andi	r25, 0x03	; 3
 25c:	c8 2f       	mov	r28, r24
 25e:	c2 95       	swap	r28
 260:	c6 95       	lsr	r28
 262:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 264:	80 fd       	sbrc	r24, 0
 266:	0b c0       	rjmp	.+22     	; 0x27e <SSD_voidDisable+0x2e>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 268:	cc 0f       	add	r28, r28
 26a:	cc 0f       	add	r28, r28
 26c:	c9 2b       	or	r28, r25
 26e:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 276:	8c 2f       	mov	r24, r28
 278:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
 27c:	0c c0       	rjmp	.+24     	; 0x296 <SSD_voidDisable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 27e:	cc 0f       	add	r28, r28
 280:	cc 0f       	add	r28, r28
 282:	93 70       	andi	r25, 0x03	; 3
 284:	c9 2b       	or	r28, r25
 286:	c0 62       	ori	r28, 0x20	; 32
 288:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 28a:	8c 2f       	mov	r24, r28
 28c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 290:	8c 2f       	mov	r24, r28
 292:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_VoidWritePin>
	}
}
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <SSD_voidSendNumber>:
void SSD_voidSendNumber( SSD_Type SSD,uint8_t Number)
{
 29a:	28 2f       	mov	r18, r24
 29c:	26 95       	lsr	r18
 29e:	23 70       	andi	r18, 0x03	; 3
	if (SSD.Type == SSD_COMMON_CATHODE)
 2a0:	80 fd       	sbrc	r24, 0
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <SSD_voidSendNumber+0x24>
	{
		DIO_VoidWritePort(SSD.DataPort,Numbers[Number%10]);
 2a4:	86 2f       	mov	r24, r22
 2a6:	6a e0       	ldi	r22, 0x0A	; 10
 2a8:	0e 94 48 03 	call	0x690	; 0x690 <__udivmodqi4>
 2ac:	e4 e6       	ldi	r30, 0x64	; 100
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	e9 0f       	add	r30, r25
 2b2:	f1 1d       	adc	r31, r1
 2b4:	82 2f       	mov	r24, r18
 2b6:	60 81       	ld	r22, Z
 2b8:	0e 94 0c 03 	call	0x618	; 0x618 <DIO_VoidWritePort>
 2bc:	08 95       	ret
	}
	else if (SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_VoidWritePort(SSD.DataPort,~Numbers[Number%10]);
 2be:	86 2f       	mov	r24, r22
 2c0:	6a e0       	ldi	r22, 0x0A	; 10
 2c2:	0e 94 48 03 	call	0x690	; 0x690 <__udivmodqi4>
 2c6:	e4 e6       	ldi	r30, 0x64	; 100
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e9 0f       	add	r30, r25
 2cc:	f1 1d       	adc	r31, r1
 2ce:	60 81       	ld	r22, Z
 2d0:	60 95       	com	r22
 2d2:	82 2f       	mov	r24, r18
 2d4:	0e 94 0c 03 	call	0x618	; 0x618 <DIO_VoidWritePort>
 2d8:	08 95       	ret

000002da <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 2da:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	
	App_start();
 2de:	0e 94 5e 00 	call	0xbc	; 0xbc <App_start>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	08 95       	ret

000002e8 <DIO_VoidSetPinDir>:
#include "DIO_interface.h"


//Function to control Pins 
void DIO_VoidSetPinDir(DIO_Type PIN)
{
 2e8:	98 2f       	mov	r25, r24
 2ea:	96 95       	lsr	r25
 2ec:	96 95       	lsr	r25
 2ee:	97 70       	andi	r25, 0x07	; 7
	switch (PIN.Port)
 2f0:	28 2f       	mov	r18, r24
 2f2:	23 70       	andi	r18, 0x03	; 3
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_VoidSetPinDir+0x16>
 2fc:	41 c0       	rjmp	.+130    	; 0x380 <DIO_VoidSetPinDir+0x98>
 2fe:	23 30       	cpi	r18, 0x03	; 3
 300:	31 05       	cpc	r19, r1
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_VoidSetPinDir+0x1e>
 304:	5a c0       	rjmp	.+180    	; 0x3ba <DIO_VoidSetPinDir+0xd2>
 306:	21 30       	cpi	r18, 0x01	; 1
 308:	31 05       	cpc	r19, r1
 30a:	e9 f0       	breq	.+58     	; 0x346 <DIO_VoidSetPinDir+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Dir != 0)
 30c:	85 ff       	sbrs	r24, 5
 30e:	0d c0       	rjmp	.+26     	; 0x32a <DIO_VoidSetPinDir+0x42>
			{
				SET_BIT(DDRA,PIN.Num);
 310:	4a b3       	in	r20, 0x1a	; 26
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_VoidSetPinDir+0x36>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	9a 95       	dec	r25
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_VoidSetPinDir+0x32>
 322:	cb 01       	movw	r24, r22
 324:	84 2b       	or	r24, r20
 326:	8a bb       	out	0x1a, r24	; 26
 328:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,PIN.Num);
 32a:	4a b3       	in	r20, 0x1a	; 26
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_VoidSetPinDir+0x50>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	9a 95       	dec	r25
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_VoidSetPinDir+0x4c>
 33c:	cb 01       	movw	r24, r22
 33e:	80 95       	com	r24
 340:	84 23       	and	r24, r20
 342:	8a bb       	out	0x1a, r24	; 26
 344:	08 95       	ret
			}
			break;
		}
		case DIO_PORTB :
		{
			if(PIN.Dir != 0)
 346:	85 ff       	sbrs	r24, 5
 348:	0d c0       	rjmp	.+26     	; 0x364 <DIO_VoidSetPinDir+0x7c>
			{
				SET_BIT(DDRB,PIN.Num);
 34a:	47 b3       	in	r20, 0x17	; 23
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_VoidSetPinDir+0x70>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	9a 95       	dec	r25
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_VoidSetPinDir+0x6c>
 35c:	cb 01       	movw	r24, r22
 35e:	84 2b       	or	r24, r20
 360:	87 bb       	out	0x17, r24	; 23
 362:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,PIN.Num);
 364:	47 b3       	in	r20, 0x17	; 23
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	b9 01       	movw	r22, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_VoidSetPinDir+0x8a>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	9a 95       	dec	r25
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_VoidSetPinDir+0x86>
 376:	cb 01       	movw	r24, r22
 378:	80 95       	com	r24
 37a:	84 23       	and	r24, r20
 37c:	87 bb       	out	0x17, r24	; 23
 37e:	08 95       	ret
			}
			break;
		}
		case DIO_PORTC :
		{
			if(PIN.Dir != 0)
 380:	85 ff       	sbrs	r24, 5
 382:	0d c0       	rjmp	.+26     	; 0x39e <DIO_VoidSetPinDir+0xb6>
			{
				SET_BIT(DDRC,PIN.Num);
 384:	44 b3       	in	r20, 0x14	; 20
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_VoidSetPinDir+0xaa>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	9a 95       	dec	r25
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_VoidSetPinDir+0xa6>
 396:	cb 01       	movw	r24, r22
 398:	84 2b       	or	r24, r20
 39a:	84 bb       	out	0x14, r24	; 20
 39c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,PIN.Num);
 39e:	44 b3       	in	r20, 0x14	; 20
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_VoidSetPinDir+0xc4>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	9a 95       	dec	r25
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_VoidSetPinDir+0xc0>
 3b0:	cb 01       	movw	r24, r22
 3b2:	80 95       	com	r24
 3b4:	84 23       	and	r24, r20
 3b6:	84 bb       	out	0x14, r24	; 20
 3b8:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Dir != 0)
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <DIO_VoidSetPinDir+0xf0>
			{
				SET_BIT(DDRD,PIN.Num);
 3be:	41 b3       	in	r20, 0x11	; 17
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_VoidSetPinDir+0xe4>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	9a 95       	dec	r25
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_VoidSetPinDir+0xe0>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	81 bb       	out	0x11, r24	; 17
 3d6:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,PIN.Num);
 3d8:	41 b3       	in	r20, 0x11	; 17
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_VoidSetPinDir+0xfe>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	9a 95       	dec	r25
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_VoidSetPinDir+0xfa>
 3ea:	cb 01       	movw	r24, r22
 3ec:	80 95       	com	r24
 3ee:	84 23       	and	r24, r20
 3f0:	81 bb       	out	0x11, r24	; 17
 3f2:	08 95       	ret

000003f4 <DIO_VoidWritePin>:
		}		
	}
}

void DIO_VoidWritePin(DIO_Type PIN)
{
 3f4:	98 2f       	mov	r25, r24
 3f6:	96 95       	lsr	r25
 3f8:	96 95       	lsr	r25
 3fa:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 3fc:	28 2f       	mov	r18, r24
 3fe:	23 70       	andi	r18, 0x03	; 3
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	31 05       	cpc	r19, r1
 406:	09 f4       	brne	.+2      	; 0x40a <DIO_VoidWritePin+0x16>
 408:	41 c0       	rjmp	.+130    	; 0x48c <DIO_VoidWritePin+0x98>
 40a:	23 30       	cpi	r18, 0x03	; 3
 40c:	31 05       	cpc	r19, r1
 40e:	09 f4       	brne	.+2      	; 0x412 <DIO_VoidWritePin+0x1e>
 410:	5a c0       	rjmp	.+180    	; 0x4c6 <DIO_VoidWritePin+0xd2>
 412:	21 30       	cpi	r18, 0x01	; 1
 414:	31 05       	cpc	r19, r1
 416:	e9 f0       	breq	.+58     	; 0x452 <DIO_VoidWritePin+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Val != 0)
 418:	86 ff       	sbrs	r24, 6
 41a:	0d c0       	rjmp	.+26     	; 0x436 <DIO_VoidWritePin+0x42>
			{
				SET_BIT(PORTA,PIN.Num);
 41c:	4b b3       	in	r20, 0x1b	; 27
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	b9 01       	movw	r22, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_VoidWritePin+0x36>
 426:	66 0f       	add	r22, r22
 428:	77 1f       	adc	r23, r23
 42a:	9a 95       	dec	r25
 42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_VoidWritePin+0x32>
 42e:	cb 01       	movw	r24, r22
 430:	84 2b       	or	r24, r20
 432:	8b bb       	out	0x1b, r24	; 27
 434:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,PIN.Num);
 436:	4b b3       	in	r20, 0x1b	; 27
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	b9 01       	movw	r22, r18
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_VoidWritePin+0x50>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	9a 95       	dec	r25
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_VoidWritePin+0x4c>
 448:	cb 01       	movw	r24, r22
 44a:	80 95       	com	r24
 44c:	84 23       	and	r24, r20
 44e:	8b bb       	out	0x1b, r24	; 27
 450:	08 95       	ret
			}
			break;			
		}
		case DIO_PORTB :
		{
			if(PIN.Val != 0)
 452:	86 ff       	sbrs	r24, 6
 454:	0d c0       	rjmp	.+26     	; 0x470 <DIO_VoidWritePin+0x7c>
			{
				SET_BIT(PORTB,PIN.Num);
 456:	48 b3       	in	r20, 0x18	; 24
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	b9 01       	movw	r22, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_VoidWritePin+0x70>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	9a 95       	dec	r25
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_VoidWritePin+0x6c>
 468:	cb 01       	movw	r24, r22
 46a:	84 2b       	or	r24, r20
 46c:	88 bb       	out	0x18, r24	; 24
 46e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,PIN.Num);
 470:	48 b3       	in	r20, 0x18	; 24
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_VoidWritePin+0x8a>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	9a 95       	dec	r25
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_VoidWritePin+0x86>
 482:	cb 01       	movw	r24, r22
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	88 bb       	out	0x18, r24	; 24
 48a:	08 95       	ret
			}
			break;		
		}
		case DIO_PORTC :
		{
			if(PIN.Val != 0)
 48c:	86 ff       	sbrs	r24, 6
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <DIO_VoidWritePin+0xb6>
			{
				SET_BIT(PORTC,PIN.Num);
 490:	45 b3       	in	r20, 0x15	; 21
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_VoidWritePin+0xaa>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	9a 95       	dec	r25
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_VoidWritePin+0xa6>
 4a2:	cb 01       	movw	r24, r22
 4a4:	84 2b       	or	r24, r20
 4a6:	85 bb       	out	0x15, r24	; 21
 4a8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,PIN.Num);
 4aa:	45 b3       	in	r20, 0x15	; 21
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <DIO_VoidWritePin+0xc4>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	9a 95       	dec	r25
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <DIO_VoidWritePin+0xc0>
 4bc:	cb 01       	movw	r24, r22
 4be:	80 95       	com	r24
 4c0:	84 23       	and	r24, r20
 4c2:	85 bb       	out	0x15, r24	; 21
 4c4:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Val != 0)
 4c6:	86 ff       	sbrs	r24, 6
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <DIO_VoidWritePin+0xf0>
			{
				SET_BIT(PORTD,PIN.Num);
 4ca:	42 b3       	in	r20, 0x12	; 18
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	b9 01       	movw	r22, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_VoidWritePin+0xe4>
 4d4:	66 0f       	add	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	9a 95       	dec	r25
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_VoidWritePin+0xe0>
 4dc:	cb 01       	movw	r24, r22
 4de:	84 2b       	or	r24, r20
 4e0:	82 bb       	out	0x12, r24	; 18
 4e2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,PIN.Num);
 4e4:	42 b3       	in	r20, 0x12	; 18
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	b9 01       	movw	r22, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_VoidWritePin+0xfe>
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	9a 95       	dec	r25
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_VoidWritePin+0xfa>
 4f6:	cb 01       	movw	r24, r22
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	82 bb       	out	0x12, r24	; 18
 4fe:	08 95       	ret

00000500 <DIO_VoidTogglePin>:
		}
	}
}

void DIO_VoidTogglePin(DIO_Type PIN)
{
 500:	48 2f       	mov	r20, r24
 502:	46 95       	lsr	r20
 504:	46 95       	lsr	r20
 506:	47 70       	andi	r20, 0x07	; 7
	switch(PIN.Port)
 508:	83 70       	andi	r24, 0x03	; 3
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	f1 f0       	breq	.+60     	; 0x54e <DIO_VoidTogglePin+0x4e>
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	91 05       	cpc	r25, r1
 516:	39 f1       	breq	.+78     	; 0x566 <DIO_VoidTogglePin+0x66>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	91 05       	cpc	r25, r1
 51c:	61 f0       	breq	.+24     	; 0x536 <DIO_VoidTogglePin+0x36>
	{
		case DIO_PORTA :
			TOG_BIT(PORTA,PIN.Num);
 51e:	5b b3       	in	r21, 0x1b	; 27
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	c9 01       	movw	r24, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_VoidTogglePin+0x2c>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	4a 95       	dec	r20
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_VoidTogglePin+0x28>
 530:	85 27       	eor	r24, r21
 532:	8b bb       	out	0x1b, r24	; 27
			break;
 534:	08 95       	ret
		case DIO_PORTB :
			TOG_BIT(PORTB,PIN.Num);
 536:	58 b3       	in	r21, 0x18	; 24
 538:	21 e0       	ldi	r18, 0x01	; 1
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	c9 01       	movw	r24, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_VoidTogglePin+0x44>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	4a 95       	dec	r20
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_VoidTogglePin+0x40>
 548:	85 27       	eor	r24, r21
 54a:	88 bb       	out	0x18, r24	; 24
			break;
 54c:	08 95       	ret
		case DIO_PORTC :
			TOG_BIT(PORTC,PIN.Num);
 54e:	55 b3       	in	r21, 0x15	; 21
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	c9 01       	movw	r24, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_VoidTogglePin+0x5c>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	4a 95       	dec	r20
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_VoidTogglePin+0x58>
 560:	85 27       	eor	r24, r21
 562:	85 bb       	out	0x15, r24	; 21
			break;
 564:	08 95       	ret
		case DIO_PORTD :
			TOG_BIT(PORTD,PIN.Num);
 566:	52 b3       	in	r21, 0x12	; 18
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	c9 01       	movw	r24, r18
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_VoidTogglePin+0x74>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	4a 95       	dec	r20
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_VoidTogglePin+0x70>
 578:	85 27       	eor	r24, r21
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret

0000057e <DIO_Uint8ReadPin>:
			break;	
	}	
}

uint8_t DIO_Uint8ReadPin(DIO_Type PIN)
{
 57e:	98 2f       	mov	r25, r24
 580:	96 95       	lsr	r25
 582:	96 95       	lsr	r25
 584:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 586:	83 70       	andi	r24, 0x03	; 3
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	22 30       	cpi	r18, 0x02	; 2
 58e:	31 05       	cpc	r19, r1
 590:	e1 f0       	breq	.+56     	; 0x5ca <DIO_Uint8ReadPin+0x4c>
 592:	23 30       	cpi	r18, 0x03	; 3
 594:	31 05       	cpc	r19, r1
 596:	21 f1       	breq	.+72     	; 0x5e0 <DIO_Uint8ReadPin+0x62>
 598:	21 30       	cpi	r18, 0x01	; 1
 59a:	31 05       	cpc	r19, r1
 59c:	59 f0       	breq	.+22     	; 0x5b4 <DIO_Uint8ReadPin+0x36>
	{
		case DIO_PORTA :
			PIN.Val = READ_BIT(PINA,PIN.Num);
 59e:	29 b3       	in	r18, 0x19	; 25
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	a9 01       	movw	r20, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_Uint8ReadPin+0x2c>
 5a6:	55 95       	asr	r21
 5a8:	47 95       	ror	r20
 5aa:	9a 95       	dec	r25
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_Uint8ReadPin+0x28>
 5ae:	ca 01       	movw	r24, r20
 5b0:	81 70       	andi	r24, 0x01	; 1
			break;
 5b2:	08 95       	ret
		case DIO_PORTB :
			PIN.Val = READ_BIT(PINB,PIN.Num);
 5b4:	26 b3       	in	r18, 0x16	; 22
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	a9 01       	movw	r20, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_Uint8ReadPin+0x42>
 5bc:	55 95       	asr	r21
 5be:	47 95       	ror	r20
 5c0:	9a 95       	dec	r25
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_Uint8ReadPin+0x3e>
 5c4:	ca 01       	movw	r24, r20
 5c6:	81 70       	andi	r24, 0x01	; 1
			break;
 5c8:	08 95       	ret
		case DIO_PORTC :
			PIN.Val = READ_BIT(PINC,PIN.Num);
 5ca:	23 b3       	in	r18, 0x13	; 19
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	a9 01       	movw	r20, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_Uint8ReadPin+0x58>
 5d2:	55 95       	asr	r21
 5d4:	47 95       	ror	r20
 5d6:	9a 95       	dec	r25
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_Uint8ReadPin+0x54>
 5da:	ca 01       	movw	r24, r20
 5dc:	81 70       	andi	r24, 0x01	; 1
			break;
 5de:	08 95       	ret
		case DIO_PORTD :
			PIN.Val = READ_BIT(PIND,PIN.Num);
 5e0:	20 b3       	in	r18, 0x10	; 16
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	a9 01       	movw	r20, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_Uint8ReadPin+0x6e>
 5e8:	55 95       	asr	r21
 5ea:	47 95       	ror	r20
 5ec:	9a 95       	dec	r25
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_Uint8ReadPin+0x6a>
 5f0:	ca 01       	movw	r24, r20
 5f2:	81 70       	andi	r24, 0x01	; 1
			break;
	}
	return PIN.Val;
}
 5f4:	08 95       	ret

000005f6 <DIO_VoidSetPortDir>:


//Function to control Ports
void DIO_VoidSetPortDir(uint8_t Port,uint8_t Port_Dir)
{
	switch(Port)
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	49 f0       	breq	.+18     	; 0x60c <DIO_VoidSetPortDir+0x16>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	28 f0       	brcs	.+10     	; 0x608 <DIO_VoidSetPortDir+0x12>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	39 f0       	breq	.+14     	; 0x610 <DIO_VoidSetPortDir+0x1a>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	41 f4       	brne	.+16     	; 0x616 <DIO_VoidSetPortDir+0x20>
 606:	06 c0       	rjmp	.+12     	; 0x614 <DIO_VoidSetPortDir+0x1e>
	{
		case DIO_PORTA :
			DDRA = Port_Dir;
 608:	6a bb       	out	0x1a, r22	; 26
			break;
 60a:	08 95       	ret
		case DIO_PORTB :
			DDRB = Port_Dir;
 60c:	67 bb       	out	0x17, r22	; 23
			break;
 60e:	08 95       	ret
		case DIO_PORTC :
			DDRC = Port_Dir;
 610:	64 bb       	out	0x14, r22	; 20
			break;
 612:	08 95       	ret
		case DIO_PORTD :
			DDRD = Port_Dir;
 614:	61 bb       	out	0x11, r22	; 17
 616:	08 95       	ret

00000618 <DIO_VoidWritePort>:
	}
}

void DIO_VoidWritePort(uint8_t Port,uint8_t Port_Val)
{
	switch(Port)
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	49 f0       	breq	.+18     	; 0x62e <DIO_VoidWritePort+0x16>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	28 f0       	brcs	.+10     	; 0x62a <DIO_VoidWritePort+0x12>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	39 f0       	breq	.+14     	; 0x632 <DIO_VoidWritePort+0x1a>
 624:	83 30       	cpi	r24, 0x03	; 3
 626:	41 f4       	brne	.+16     	; 0x638 <DIO_VoidWritePort+0x20>
 628:	06 c0       	rjmp	.+12     	; 0x636 <DIO_VoidWritePort+0x1e>
	{
		case DIO_PORTA :
			PORTA = Port_Val;
 62a:	6b bb       	out	0x1b, r22	; 27
			break;
 62c:	08 95       	ret
		case DIO_PORTB :
			PORTB = Port_Val;
 62e:	68 bb       	out	0x18, r22	; 24
			break;
 630:	08 95       	ret
		case DIO_PORTC :
			PORTB = Port_Val;
 632:	68 bb       	out	0x18, r22	; 24
			break;
 634:	08 95       	ret
		case DIO_PORTD :
			PORTD = Port_Val;
 636:	62 bb       	out	0x12, r22	; 18
 638:	08 95       	ret

0000063a <DIO_Uint8ReadPort>:
}

uint8_t DIO_Uint8ReadPort(uint8_t Port)
{
	uint8_t val;
	switch(Port)
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	49 f0       	breq	.+18     	; 0x650 <DIO_Uint8ReadPort+0x16>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	28 f0       	brcs	.+10     	; 0x64c <DIO_Uint8ReadPort+0x12>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	39 f0       	breq	.+14     	; 0x654 <DIO_Uint8ReadPort+0x1a>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	41 f4       	brne	.+16     	; 0x65a <DIO_Uint8ReadPort+0x20>
 64a:	06 c0       	rjmp	.+12     	; 0x658 <DIO_Uint8ReadPort+0x1e>
	{
		case DIO_PORTA :
			val = PINA;
 64c:	99 b3       	in	r25, 0x19	; 25
			break;
 64e:	05 c0       	rjmp	.+10     	; 0x65a <DIO_Uint8ReadPort+0x20>
		case DIO_PORTB :
			val = PINB;
 650:	96 b3       	in	r25, 0x16	; 22
			break;
 652:	03 c0       	rjmp	.+6      	; 0x65a <DIO_Uint8ReadPort+0x20>
		case DIO_PORTC :
			val = PINC;
 654:	93 b3       	in	r25, 0x13	; 19
			break;
 656:	01 c0       	rjmp	.+2      	; 0x65a <DIO_Uint8ReadPort+0x20>
		case DIO_PORTD :
			val = PIND;
 658:	90 b3       	in	r25, 0x10	; 16
			break;
	}
	return val;
}
 65a:	89 2f       	mov	r24, r25
 65c:	08 95       	ret

0000065e <DIO_VoidTogglePort>:

void DIO_VoidTogglePort(uint8_t Port)
{
	switch(Port)
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	59 f0       	breq	.+22     	; 0x678 <DIO_VoidTogglePort+0x1a>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	28 f0       	brcs	.+10     	; 0x670 <DIO_VoidTogglePort+0x12>
 666:	82 30       	cpi	r24, 0x02	; 2
 668:	59 f0       	breq	.+22     	; 0x680 <DIO_VoidTogglePort+0x22>
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	81 f4       	brne	.+32     	; 0x68e <DIO_VoidTogglePort+0x30>
 66e:	0c c0       	rjmp	.+24     	; 0x688 <DIO_VoidTogglePort+0x2a>
	{
		case DIO_PORTA :
			PORTA ^= PORT_HIGH;
 670:	8b b3       	in	r24, 0x1b	; 27
 672:	80 95       	com	r24
 674:	8b bb       	out	0x1b, r24	; 27
			break;
 676:	08 95       	ret
		case DIO_PORTB :
			PORTB ^= PORT_HIGH;
 678:	88 b3       	in	r24, 0x18	; 24
 67a:	80 95       	com	r24
 67c:	88 bb       	out	0x18, r24	; 24
			break;
 67e:	08 95       	ret
		case DIO_PORTC :
			PORTC ^= PORT_HIGH;
 680:	85 b3       	in	r24, 0x15	; 21
 682:	80 95       	com	r24
 684:	85 bb       	out	0x15, r24	; 21
			break;
 686:	08 95       	ret
		case DIO_PORTD :
			PORTD ^= PORT_HIGH;
 688:	82 b3       	in	r24, 0x12	; 18
 68a:	80 95       	com	r24
 68c:	82 bb       	out	0x12, r24	; 18
 68e:	08 95       	ret

00000690 <__udivmodqi4>:
 690:	99 1b       	sub	r25, r25
 692:	79 e0       	ldi	r23, 0x09	; 9
 694:	04 c0       	rjmp	.+8      	; 0x69e <__udivmodqi4_ep>

00000696 <__udivmodqi4_loop>:
 696:	99 1f       	adc	r25, r25
 698:	96 17       	cp	r25, r22
 69a:	08 f0       	brcs	.+2      	; 0x69e <__udivmodqi4_ep>
 69c:	96 1b       	sub	r25, r22

0000069e <__udivmodqi4_ep>:
 69e:	88 1f       	adc	r24, r24
 6a0:	7a 95       	dec	r23
 6a2:	c9 f7       	brne	.-14     	; 0x696 <__udivmodqi4_loop>
 6a4:	80 95       	com	r24
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
