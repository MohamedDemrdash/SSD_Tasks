
TEST programe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006be  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00000e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef5  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a3  00000000  00000000  00001ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000884  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b8  00000000  00000000  0000323f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
  8a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <App_init>:
SSD_Type SSD2 ={SSD_COMMON_CATHODE,SSD_PORTA,SSD_PORTB,7};	
SW_Type SW1 = {SW_PORTC,0,SW_PULL_DOWN};
	
void App_init(void)
{
	SSD_voidInitialDataPort(SSD1);
  92:	80 91 62 00 	lds	r24, 0x0062
  96:	0e 94 06 01 	call	0x20c	; 0x20c <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD1);
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	0e 94 0c 01 	call	0x218	; 0x218 <SSD_voidEnable>
	SSD_voidInitialDataPort(SSD2);
  a2:	80 91 61 00 	lds	r24, 0x0061
  a6:	0e 94 06 01 	call	0x20c	; 0x20c <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD2);
  aa:	80 91 61 00 	lds	r24, 0x0061
  ae:	0e 94 0c 01 	call	0x218	; 0x218 <SSD_voidEnable>
	SW_VoidInit(SW1);
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	0e 94 7e 00 	call	0xfc	; 0xfc <SW_VoidInit>
}
  ba:	08 95       	ret

000000bc <App_start>:
void App_start(void)
{
	uint8_t i =0;
	while(1)
	{
		for(i =0 ; i <=9;i++)
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	0c c0       	rjmp	.+24     	; 0xda <App_start+0x1e>
		{
			SSD_voidSendNumber(SSD1,i);
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	6c 2f       	mov	r22, r28
  c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <SSD_voidSendNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 e2       	ldi	r24, 0x23	; 35
  ce:	94 ef       	ldi	r25, 0xF4	; 244
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <App_start+0x14>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <App_start+0x1a>
  d6:	00 00       	nop
void App_start(void)
{
	uint8_t i =0;
	while(1)
	{
		for(i =0 ; i <=9;i++)
  d8:	cf 5f       	subi	r28, 0xFF	; 255
  da:	ca 30       	cpi	r28, 0x0A	; 10
  dc:	90 f3       	brcs	.-28     	; 0xc2 <App_start+0x6>
  de:	cd 2f       	mov	r28, r29
			SSD_voidSendNumber(SSD1,i);
			_delay_ms(250);
		}
		for(i =8 ; i >=1;i--)
		{
			SSD_voidSendNumber(SSD1,i);
  e0:	80 91 62 00 	lds	r24, 0x0062
  e4:	6c 2f       	mov	r22, r28
  e6:	0e 94 56 01 	call	0x2ac	; 0x2ac <SSD_voidSendNumber>
  ea:	83 e2       	ldi	r24, 0x23	; 35
  ec:	94 ef       	ldi	r25, 0xF4	; 244
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <App_start+0x32>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <App_start+0x38>
  f4:	00 00       	nop
		for(i =0 ; i <=9;i++)
		{
			SSD_voidSendNumber(SSD1,i);
			_delay_ms(250);
		}
		for(i =8 ; i >=1;i--)
  f6:	c1 50       	subi	r28, 0x01	; 1
  f8:	99 f7       	brne	.-26     	; 0xe0 <App_start+0x24>
  fa:	ef cf       	rjmp	.-34     	; 0xda <App_start+0x1e>

000000fc <SW_VoidInit>:
#include "../../MCAL/DIO Driver/DIO_interface.h"

void SW_VoidInit(SW_Type SW)
{
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT,LOW};
	DIO_VoidSetPinDir(PIN);
  fc:	8f 71       	andi	r24, 0x1F	; 31
  fe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
}
 102:	08 95       	ret

00000104 <SW_Uint8GetPressed>:

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
 104:	cf 93       	push	r28
	uint8_t Get_Pressed = SW_NOT_PRESSED;
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
 106:	c8 2f       	mov	r28, r24
 108:	cf 71       	andi	r28, 0x1F	; 31
	if (SW.Pull_State == SW_PULL_DOWN)
 10a:	85 fd       	sbrc	r24, 5
 10c:	0d c0       	rjmp	.+26     	; 0x128 <SW_Uint8GetPressed+0x24>
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_Uint8ReadPin>
 114:	88 23       	and	r24, r24
 116:	a9 f0       	breq	.+42     	; 0x142 <SW_Uint8GetPressed+0x3e>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (HIGH == DIO_Uint8ReadPin(PIN))
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 f0       	breq	.+36     	; 0x148 <SW_Uint8GetPressed+0x44>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	10 c0       	rjmp	.+32     	; 0x148 <SW_Uint8GetPressed+0x44>
			Get_Pressed = SW_PRESSED;
		}
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
 128:	8c 2f       	mov	r24, r28
 12a:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_Uint8ReadPin>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	51 f0       	breq	.+20     	; 0x146 <SW_Uint8GetPressed+0x42>
		{
			Get_Pressed = SW_NOT_PRESSED;
		}
		else if (LOW == DIO_Uint8ReadPin(PIN))
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 c8 02 	call	0x590	; 0x590 <DIO_Uint8ReadPin>
	DIO_VoidSetPinDir(PIN);
}

uint8_t SW_Uint8GetPressed(SW_Type SW)
{
	uint8_t Get_Pressed = SW_NOT_PRESSED;
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	88 23       	and	r24, r24
 13c:	29 f0       	breq	.+10     	; 0x148 <SW_Uint8GetPressed+0x44>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	03 c0       	rjmp	.+6      	; 0x148 <SW_Uint8GetPressed+0x44>
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT};
	if (SW.Pull_State == SW_PULL_DOWN)
	{
		if (LOW == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	01 c0       	rjmp	.+2      	; 0x148 <SW_Uint8GetPressed+0x44>
	}
	else if (SW.Pull_State == SW_PULL_UP)
	{
		if (HIGH == DIO_Uint8ReadPin(PIN))
		{
			Get_Pressed = SW_NOT_PRESSED;
 146:	90 e0       	ldi	r25, 0x00	; 0
		{
			Get_Pressed = SW_PRESSED;
		}
	}
	return Get_Pressed; 
}
 148:	89 2f       	mov	r24, r25
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <LED_Init>:
#include "../../utilities/STD_Types.h"
#include "../../MCAL/DIO Driver/DIO_interface.h"
#include "LED_interface.h"

void LED_Init(LED_Type LED)
{
 14e:	cf 93       	push	r28
 150:	28 2f       	mov	r18, r24
 152:	23 70       	andi	r18, 0x03	; 3
 154:	98 2f       	mov	r25, r24
 156:	96 95       	lsr	r25
 158:	96 95       	lsr	r25
 15a:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 15c:	85 ff       	sbrs	r24, 5
 15e:	0d c0       	rjmp	.+26     	; 0x17a <LED_Init+0x2c>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 160:	c9 2f       	mov	r28, r25
 162:	cc 0f       	add	r28, r28
 164:	cc 0f       	add	r28, r28
 166:	c2 2b       	or	r28, r18
 168:	c0 62       	ori	r28, 0x20	; 32
 16a:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 16c:	8c 2f       	mov	r24, r28
 16e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 172:	8c 2f       	mov	r24, r28
 174:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 178:	0c c0       	rjmp	.+24     	; 0x192 <LED_Init+0x44>
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 17a:	c9 2f       	mov	r28, r25
 17c:	c7 70       	andi	r28, 0x07	; 7
 17e:	cc 0f       	add	r28, r28
 180:	cc 0f       	add	r28, r28
 182:	c2 2b       	or	r28, r18
 184:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 186:	8c 2f       	mov	r24, r28
 188:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
	}
}
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <LED_On>:

void LED_On(LED_Type LED)
{
 196:	28 2f       	mov	r18, r24
 198:	23 70       	andi	r18, 0x03	; 3
 19a:	98 2f       	mov	r25, r24
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 1a2:	85 ff       	sbrs	r24, 5
 1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <LED_On+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 1a6:	99 0f       	add	r25, r25
 1a8:	99 0f       	add	r25, r25
 1aa:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1ac:	82 2f       	mov	r24, r18
 1ae:	80 66       	ori	r24, 0x60	; 96
 1b0:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 1b4:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1b6:	97 70       	andi	r25, 0x07	; 7
 1b8:	99 0f       	add	r25, r25
 1ba:	99 0f       	add	r25, r25
 1bc:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1be:	82 2f       	mov	r24, r18
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 1c6:	08 95       	ret

000001c8 <LED_Off>:
	}
}

void LED_Off(LED_Type LED)
{
 1c8:	28 2f       	mov	r18, r24
 1ca:	23 70       	andi	r18, 0x03	; 3
 1cc:	98 2f       	mov	r25, r24
 1ce:	96 95       	lsr	r25
 1d0:	96 95       	lsr	r25
 1d2:	97 70       	andi	r25, 0x07	; 7
	if (LED.Active_State == ACTIVE_HIGH)
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	08 c0       	rjmp	.+16     	; 0x1e8 <LED_Off+0x20>
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1d8:	99 0f       	add	r25, r25
 1da:	99 0f       	add	r25, r25
 1dc:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1de:	82 2f       	mov	r24, r18
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 1e6:	08 95       	ret
	}
	else if (LED.Active_State == ACTIVE_LOW)
	{
		DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,HIGH};
 1e8:	97 70       	andi	r25, 0x07	; 7
 1ea:	99 0f       	add	r25, r25
 1ec:	99 0f       	add	r25, r25
 1ee:	29 2b       	or	r18, r25
		DIO_VoidWritePin(PIN);
 1f0:	82 2f       	mov	r24, r18
 1f2:	80 66       	ori	r24, 0x60	; 96
 1f4:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 1f8:	08 95       	ret

000001fa <LED_Tog>:
	}
}

void LED_Tog(LED_Type LED)
{
	DIO_Type PIN = {LED.Port,LED.Pin,OUTPUT,LOW};
 1fa:	8f 71       	andi	r24, 0x1F	; 31
	DIO_VoidTogglePin(PIN);
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	0e 94 89 02 	call	0x512	; 0x512 <DIO_VoidTogglePin>
}
 202:	08 95       	ret

00000204 <LED_Init_Port>:
	//Delay(delay):
}*/

void LED_Init_Port(uint8_t Port)
{
	DIO_VoidSetPortDir(Port,PORT_OUT);
 204:	6f ef       	ldi	r22, 0xFF	; 255
 206:	0e 94 04 03 	call	0x608	; 0x608 <DIO_VoidSetPortDir>
 20a:	08 95       	ret

0000020c <SSD_voidInitialDataPort>:



void SSD_voidInitialDataPort( SSD_Type SSD )
{
	DIO_VoidSetPortDir(SSD.DataPort,PORT_OUT);
 20c:	86 95       	lsr	r24
 20e:	83 70       	andi	r24, 0x03	; 3
 210:	6f ef       	ldi	r22, 0xFF	; 255
 212:	0e 94 04 03 	call	0x608	; 0x608 <DIO_VoidSetPortDir>
}
 216:	08 95       	ret

00000218 <SSD_voidEnable>:
void SSD_voidEnable( SSD_Type SSD)
{
 218:	cf 93       	push	r28
 21a:	98 2f       	mov	r25, r24
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	96 95       	lsr	r25
 222:	93 70       	andi	r25, 0x03	; 3
 224:	c8 2f       	mov	r28, r24
 226:	c2 95       	swap	r28
 228:	c6 95       	lsr	r28
 22a:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 22c:	80 fd       	sbrc	r24, 0
 22e:	0c c0       	rjmp	.+24     	; 0x248 <SSD_voidEnable+0x30>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 230:	cc 0f       	add	r28, r28
 232:	cc 0f       	add	r28, r28
 234:	c9 2b       	or	r28, r25
 236:	c0 62       	ori	r28, 0x20	; 32
 238:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);	
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 246:	0b c0       	rjmp	.+22     	; 0x25e <SSD_voidEnable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 248:	cc 0f       	add	r28, r28
 24a:	cc 0f       	add	r28, r28
 24c:	93 70       	andi	r25, 0x03	; 3
 24e:	c9 2b       	or	r28, r25
 250:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 252:	8c 2f       	mov	r24, r28
 254:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 258:	8c 2f       	mov	r24, r28
 25a:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
	}
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <SSD_voidDisable>:
void SSD_voidDisable( SSD_Type SSD)
{
 262:	cf 93       	push	r28
 264:	98 2f       	mov	r25, r24
 266:	96 95       	lsr	r25
 268:	96 95       	lsr	r25
 26a:	96 95       	lsr	r25
 26c:	93 70       	andi	r25, 0x03	; 3
 26e:	c8 2f       	mov	r28, r24
 270:	c2 95       	swap	r28
 272:	c6 95       	lsr	r28
 274:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 276:	80 fd       	sbrc	r24, 0
 278:	0b c0       	rjmp	.+22     	; 0x290 <SSD_voidDisable+0x2e>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 27a:	cc 0f       	add	r28, r28
 27c:	cc 0f       	add	r28, r28
 27e:	c9 2b       	or	r28, r25
 280:	c0 66       	ori	r28, 0x60	; 96
		DIO_VoidSetPinDir(PIN);
 282:	8c 2f       	mov	r24, r28
 284:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
 28e:	0c c0       	rjmp	.+24     	; 0x2a8 <SSD_voidDisable+0x46>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 290:	cc 0f       	add	r28, r28
 292:	cc 0f       	add	r28, r28
 294:	93 70       	andi	r25, 0x03	; 3
 296:	c9 2b       	or	r28, r25
 298:	c0 62       	ori	r28, 0x20	; 32
 29a:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 03 02 	call	0x406	; 0x406 <DIO_VoidWritePin>
	}
}
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <SSD_voidSendNumber>:
void SSD_voidSendNumber( SSD_Type SSD,uint8_t Number)
{
 2ac:	28 2f       	mov	r18, r24
 2ae:	26 95       	lsr	r18
 2b0:	23 70       	andi	r18, 0x03	; 3
	if (SSD.Type == SSD_COMMON_CATHODE)
 2b2:	80 fd       	sbrc	r24, 0
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <SSD_voidSendNumber+0x24>
	{
		DIO_VoidWritePort(SSD.DataPort,Numbers[Number%10]);
 2b6:	86 2f       	mov	r24, r22
 2b8:	6a e0       	ldi	r22, 0x0A	; 10
 2ba:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodqi4>
 2be:	e3 e6       	ldi	r30, 0x63	; 99
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	e9 0f       	add	r30, r25
 2c4:	f1 1d       	adc	r31, r1
 2c6:	82 2f       	mov	r24, r18
 2c8:	60 81       	ld	r22, Z
 2ca:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_VoidWritePort>
 2ce:	08 95       	ret
	}
	else if (SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_VoidWritePort(SSD.DataPort,~Numbers[Number%10]);
 2d0:	86 2f       	mov	r24, r22
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodqi4>
 2d8:	e3 e6       	ldi	r30, 0x63	; 99
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e9 0f       	add	r30, r25
 2de:	f1 1d       	adc	r31, r1
 2e0:	60 81       	ld	r22, Z
 2e2:	60 95       	com	r22
 2e4:	82 2f       	mov	r24, r18
 2e6:	0e 94 15 03 	call	0x62a	; 0x62a <DIO_VoidWritePort>
 2ea:	08 95       	ret

000002ec <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <App_init>
	
	App_start();
 2f0:	0e 94 5e 00 	call	0xbc	; 0xbc <App_start>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret

000002fa <DIO_VoidSetPinDir>:
#include "DIO_interface.h"


//Function to control Pins 
void DIO_VoidSetPinDir(DIO_Type PIN)
{
 2fa:	98 2f       	mov	r25, r24
 2fc:	96 95       	lsr	r25
 2fe:	96 95       	lsr	r25
 300:	97 70       	andi	r25, 0x07	; 7
	switch (PIN.Port)
 302:	28 2f       	mov	r18, r24
 304:	23 70       	andi	r18, 0x03	; 3
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	22 30       	cpi	r18, 0x02	; 2
 30a:	31 05       	cpc	r19, r1
 30c:	09 f4       	brne	.+2      	; 0x310 <DIO_VoidSetPinDir+0x16>
 30e:	41 c0       	rjmp	.+130    	; 0x392 <DIO_VoidSetPinDir+0x98>
 310:	23 30       	cpi	r18, 0x03	; 3
 312:	31 05       	cpc	r19, r1
 314:	09 f4       	brne	.+2      	; 0x318 <DIO_VoidSetPinDir+0x1e>
 316:	5a c0       	rjmp	.+180    	; 0x3cc <DIO_VoidSetPinDir+0xd2>
 318:	21 30       	cpi	r18, 0x01	; 1
 31a:	31 05       	cpc	r19, r1
 31c:	e9 f0       	breq	.+58     	; 0x358 <DIO_VoidSetPinDir+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Dir != 0)
 31e:	85 ff       	sbrs	r24, 5
 320:	0d c0       	rjmp	.+26     	; 0x33c <DIO_VoidSetPinDir+0x42>
			{
				SET_BIT(DDRA,PIN.Num);
 322:	4a b3       	in	r20, 0x1a	; 26
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_VoidSetPinDir+0x36>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	9a 95       	dec	r25
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_VoidSetPinDir+0x32>
 334:	cb 01       	movw	r24, r22
 336:	84 2b       	or	r24, r20
 338:	8a bb       	out	0x1a, r24	; 26
 33a:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,PIN.Num);
 33c:	4a b3       	in	r20, 0x1a	; 26
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_VoidSetPinDir+0x50>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	9a 95       	dec	r25
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_VoidSetPinDir+0x4c>
 34e:	cb 01       	movw	r24, r22
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	8a bb       	out	0x1a, r24	; 26
 356:	08 95       	ret
			}
			break;
		}
		case DIO_PORTB :
		{
			if(PIN.Dir != 0)
 358:	85 ff       	sbrs	r24, 5
 35a:	0d c0       	rjmp	.+26     	; 0x376 <DIO_VoidSetPinDir+0x7c>
			{
				SET_BIT(DDRB,PIN.Num);
 35c:	47 b3       	in	r20, 0x17	; 23
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_VoidSetPinDir+0x70>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	9a 95       	dec	r25
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_VoidSetPinDir+0x6c>
 36e:	cb 01       	movw	r24, r22
 370:	84 2b       	or	r24, r20
 372:	87 bb       	out	0x17, r24	; 23
 374:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,PIN.Num);
 376:	47 b3       	in	r20, 0x17	; 23
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_VoidSetPinDir+0x8a>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	9a 95       	dec	r25
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_VoidSetPinDir+0x86>
 388:	cb 01       	movw	r24, r22
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	87 bb       	out	0x17, r24	; 23
 390:	08 95       	ret
			}
			break;
		}
		case DIO_PORTC :
		{
			if(PIN.Dir != 0)
 392:	85 ff       	sbrs	r24, 5
 394:	0d c0       	rjmp	.+26     	; 0x3b0 <DIO_VoidSetPinDir+0xb6>
			{
				SET_BIT(DDRC,PIN.Num);
 396:	44 b3       	in	r20, 0x14	; 20
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	b9 01       	movw	r22, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_VoidSetPinDir+0xaa>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	9a 95       	dec	r25
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_VoidSetPinDir+0xa6>
 3a8:	cb 01       	movw	r24, r22
 3aa:	84 2b       	or	r24, r20
 3ac:	84 bb       	out	0x14, r24	; 20
 3ae:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,PIN.Num);
 3b0:	44 b3       	in	r20, 0x14	; 20
 3b2:	21 e0       	ldi	r18, 0x01	; 1
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	b9 01       	movw	r22, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_VoidSetPinDir+0xc4>
 3ba:	66 0f       	add	r22, r22
 3bc:	77 1f       	adc	r23, r23
 3be:	9a 95       	dec	r25
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_VoidSetPinDir+0xc0>
 3c2:	cb 01       	movw	r24, r22
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	84 bb       	out	0x14, r24	; 20
 3ca:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Dir != 0)
 3cc:	85 ff       	sbrs	r24, 5
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <DIO_VoidSetPinDir+0xf0>
			{
				SET_BIT(DDRD,PIN.Num);
 3d0:	41 b3       	in	r20, 0x11	; 17
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_VoidSetPinDir+0xe4>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	9a 95       	dec	r25
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_VoidSetPinDir+0xe0>
 3e2:	cb 01       	movw	r24, r22
 3e4:	84 2b       	or	r24, r20
 3e6:	81 bb       	out	0x11, r24	; 17
 3e8:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,PIN.Num);
 3ea:	41 b3       	in	r20, 0x11	; 17
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	b9 01       	movw	r22, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_VoidSetPinDir+0xfe>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	9a 95       	dec	r25
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_VoidSetPinDir+0xfa>
 3fc:	cb 01       	movw	r24, r22
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	81 bb       	out	0x11, r24	; 17
 404:	08 95       	ret

00000406 <DIO_VoidWritePin>:
		}		
	}
}

void DIO_VoidWritePin(DIO_Type PIN)
{
 406:	98 2f       	mov	r25, r24
 408:	96 95       	lsr	r25
 40a:	96 95       	lsr	r25
 40c:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 40e:	28 2f       	mov	r18, r24
 410:	23 70       	andi	r18, 0x03	; 3
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	22 30       	cpi	r18, 0x02	; 2
 416:	31 05       	cpc	r19, r1
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_VoidWritePin+0x16>
 41a:	41 c0       	rjmp	.+130    	; 0x49e <DIO_VoidWritePin+0x98>
 41c:	23 30       	cpi	r18, 0x03	; 3
 41e:	31 05       	cpc	r19, r1
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_VoidWritePin+0x1e>
 422:	5a c0       	rjmp	.+180    	; 0x4d8 <DIO_VoidWritePin+0xd2>
 424:	21 30       	cpi	r18, 0x01	; 1
 426:	31 05       	cpc	r19, r1
 428:	e9 f0       	breq	.+58     	; 0x464 <DIO_VoidWritePin+0x5e>
	{
		case DIO_PORTA :
		{
			if(PIN.Val != 0)
 42a:	86 ff       	sbrs	r24, 6
 42c:	0d c0       	rjmp	.+26     	; 0x448 <DIO_VoidWritePin+0x42>
			{
				SET_BIT(PORTA,PIN.Num);
 42e:	4b b3       	in	r20, 0x1b	; 27
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_VoidWritePin+0x36>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	9a 95       	dec	r25
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_VoidWritePin+0x32>
 440:	cb 01       	movw	r24, r22
 442:	84 2b       	or	r24, r20
 444:	8b bb       	out	0x1b, r24	; 27
 446:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,PIN.Num);
 448:	4b b3       	in	r20, 0x1b	; 27
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_VoidWritePin+0x50>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	9a 95       	dec	r25
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_VoidWritePin+0x4c>
 45a:	cb 01       	movw	r24, r22
 45c:	80 95       	com	r24
 45e:	84 23       	and	r24, r20
 460:	8b bb       	out	0x1b, r24	; 27
 462:	08 95       	ret
			}
			break;			
		}
		case DIO_PORTB :
		{
			if(PIN.Val != 0)
 464:	86 ff       	sbrs	r24, 6
 466:	0d c0       	rjmp	.+26     	; 0x482 <DIO_VoidWritePin+0x7c>
			{
				SET_BIT(PORTB,PIN.Num);
 468:	48 b3       	in	r20, 0x18	; 24
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_VoidWritePin+0x70>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	9a 95       	dec	r25
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_VoidWritePin+0x6c>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	88 bb       	out	0x18, r24	; 24
 480:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,PIN.Num);
 482:	48 b3       	in	r20, 0x18	; 24
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_VoidWritePin+0x8a>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	9a 95       	dec	r25
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_VoidWritePin+0x86>
 494:	cb 01       	movw	r24, r22
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	88 bb       	out	0x18, r24	; 24
 49c:	08 95       	ret
			}
			break;		
		}
		case DIO_PORTC :
		{
			if(PIN.Val != 0)
 49e:	86 ff       	sbrs	r24, 6
 4a0:	0d c0       	rjmp	.+26     	; 0x4bc <DIO_VoidWritePin+0xb6>
			{
				SET_BIT(PORTC,PIN.Num);
 4a2:	45 b3       	in	r20, 0x15	; 21
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	b9 01       	movw	r22, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_VoidWritePin+0xaa>
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	9a 95       	dec	r25
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_VoidWritePin+0xa6>
 4b4:	cb 01       	movw	r24, r22
 4b6:	84 2b       	or	r24, r20
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,PIN.Num);
 4bc:	45 b3       	in	r20, 0x15	; 21
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_VoidWritePin+0xc4>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	9a 95       	dec	r25
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_VoidWritePin+0xc0>
 4ce:	cb 01       	movw	r24, r22
 4d0:	80 95       	com	r24
 4d2:	84 23       	and	r24, r20
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	08 95       	ret
			}
			break;
		}
		case DIO_PORTD :
		{
			if(PIN.Val != 0)
 4d8:	86 ff       	sbrs	r24, 6
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <DIO_VoidWritePin+0xf0>
			{
				SET_BIT(PORTD,PIN.Num);
 4dc:	42 b3       	in	r20, 0x12	; 18
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_VoidWritePin+0xe4>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	9a 95       	dec	r25
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_VoidWritePin+0xe0>
 4ee:	cb 01       	movw	r24, r22
 4f0:	84 2b       	or	r24, r20
 4f2:	82 bb       	out	0x12, r24	; 18
 4f4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,PIN.Num);
 4f6:	42 b3       	in	r20, 0x12	; 18
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	b9 01       	movw	r22, r18
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_VoidWritePin+0xfe>
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	9a 95       	dec	r25
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_VoidWritePin+0xfa>
 508:	cb 01       	movw	r24, r22
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	82 bb       	out	0x12, r24	; 18
 510:	08 95       	ret

00000512 <DIO_VoidTogglePin>:
		}
	}
}

void DIO_VoidTogglePin(DIO_Type PIN)
{
 512:	48 2f       	mov	r20, r24
 514:	46 95       	lsr	r20
 516:	46 95       	lsr	r20
 518:	47 70       	andi	r20, 0x07	; 7
	switch(PIN.Port)
 51a:	83 70       	andi	r24, 0x03	; 3
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	f1 f0       	breq	.+60     	; 0x560 <DIO_VoidTogglePin+0x4e>
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	91 05       	cpc	r25, r1
 528:	39 f1       	breq	.+78     	; 0x578 <DIO_VoidTogglePin+0x66>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 05       	cpc	r25, r1
 52e:	61 f0       	breq	.+24     	; 0x548 <DIO_VoidTogglePin+0x36>
	{
		case DIO_PORTA :
			TOG_BIT(PORTA,PIN.Num);
 530:	5b b3       	in	r21, 0x1b	; 27
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	c9 01       	movw	r24, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_VoidTogglePin+0x2c>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	4a 95       	dec	r20
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_VoidTogglePin+0x28>
 542:	85 27       	eor	r24, r21
 544:	8b bb       	out	0x1b, r24	; 27
			break;
 546:	08 95       	ret
		case DIO_PORTB :
			TOG_BIT(PORTB,PIN.Num);
 548:	58 b3       	in	r21, 0x18	; 24
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	c9 01       	movw	r24, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_VoidTogglePin+0x44>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	4a 95       	dec	r20
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_VoidTogglePin+0x40>
 55a:	85 27       	eor	r24, r21
 55c:	88 bb       	out	0x18, r24	; 24
			break;
 55e:	08 95       	ret
		case DIO_PORTC :
			TOG_BIT(PORTC,PIN.Num);
 560:	55 b3       	in	r21, 0x15	; 21
 562:	21 e0       	ldi	r18, 0x01	; 1
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	c9 01       	movw	r24, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_VoidTogglePin+0x5c>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	4a 95       	dec	r20
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_VoidTogglePin+0x58>
 572:	85 27       	eor	r24, r21
 574:	85 bb       	out	0x15, r24	; 21
			break;
 576:	08 95       	ret
		case DIO_PORTD :
			TOG_BIT(PORTD,PIN.Num);
 578:	52 b3       	in	r21, 0x12	; 18
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	c9 01       	movw	r24, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_VoidTogglePin+0x74>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	4a 95       	dec	r20
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_VoidTogglePin+0x70>
 58a:	85 27       	eor	r24, r21
 58c:	82 bb       	out	0x12, r24	; 18
 58e:	08 95       	ret

00000590 <DIO_Uint8ReadPin>:
			break;	
	}	
}

uint8_t DIO_Uint8ReadPin(DIO_Type PIN)
{
 590:	98 2f       	mov	r25, r24
 592:	96 95       	lsr	r25
 594:	96 95       	lsr	r25
 596:	97 70       	andi	r25, 0x07	; 7
	switch(PIN.Port)
 598:	83 70       	andi	r24, 0x03	; 3
 59a:	28 2f       	mov	r18, r24
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	22 30       	cpi	r18, 0x02	; 2
 5a0:	31 05       	cpc	r19, r1
 5a2:	e1 f0       	breq	.+56     	; 0x5dc <DIO_Uint8ReadPin+0x4c>
 5a4:	23 30       	cpi	r18, 0x03	; 3
 5a6:	31 05       	cpc	r19, r1
 5a8:	21 f1       	breq	.+72     	; 0x5f2 <DIO_Uint8ReadPin+0x62>
 5aa:	21 30       	cpi	r18, 0x01	; 1
 5ac:	31 05       	cpc	r19, r1
 5ae:	59 f0       	breq	.+22     	; 0x5c6 <DIO_Uint8ReadPin+0x36>
	{
		case DIO_PORTA :
			PIN.Val = READ_BIT(PINA,PIN.Num);
 5b0:	29 b3       	in	r18, 0x19	; 25
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	a9 01       	movw	r20, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_Uint8ReadPin+0x2c>
 5b8:	55 95       	asr	r21
 5ba:	47 95       	ror	r20
 5bc:	9a 95       	dec	r25
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_Uint8ReadPin+0x28>
 5c0:	ca 01       	movw	r24, r20
 5c2:	81 70       	andi	r24, 0x01	; 1
			break;
 5c4:	08 95       	ret
		case DIO_PORTB :
			PIN.Val = READ_BIT(PINB,PIN.Num);
 5c6:	26 b3       	in	r18, 0x16	; 22
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	a9 01       	movw	r20, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_Uint8ReadPin+0x42>
 5ce:	55 95       	asr	r21
 5d0:	47 95       	ror	r20
 5d2:	9a 95       	dec	r25
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_Uint8ReadPin+0x3e>
 5d6:	ca 01       	movw	r24, r20
 5d8:	81 70       	andi	r24, 0x01	; 1
			break;
 5da:	08 95       	ret
		case DIO_PORTC :
			PIN.Val = READ_BIT(PINC,PIN.Num);
 5dc:	23 b3       	in	r18, 0x13	; 19
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	a9 01       	movw	r20, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_Uint8ReadPin+0x58>
 5e4:	55 95       	asr	r21
 5e6:	47 95       	ror	r20
 5e8:	9a 95       	dec	r25
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_Uint8ReadPin+0x54>
 5ec:	ca 01       	movw	r24, r20
 5ee:	81 70       	andi	r24, 0x01	; 1
			break;
 5f0:	08 95       	ret
		case DIO_PORTD :
			PIN.Val = READ_BIT(PIND,PIN.Num);
 5f2:	20 b3       	in	r18, 0x10	; 16
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	a9 01       	movw	r20, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_Uint8ReadPin+0x6e>
 5fa:	55 95       	asr	r21
 5fc:	47 95       	ror	r20
 5fe:	9a 95       	dec	r25
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_Uint8ReadPin+0x6a>
 602:	ca 01       	movw	r24, r20
 604:	81 70       	andi	r24, 0x01	; 1
			break;
	}
	return PIN.Val;
}
 606:	08 95       	ret

00000608 <DIO_VoidSetPortDir>:


//Function to control Ports
void DIO_VoidSetPortDir(uint8_t Port,uint8_t Port_Dir)
{
	switch(Port)
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	49 f0       	breq	.+18     	; 0x61e <DIO_VoidSetPortDir+0x16>
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	28 f0       	brcs	.+10     	; 0x61a <DIO_VoidSetPortDir+0x12>
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	39 f0       	breq	.+14     	; 0x622 <DIO_VoidSetPortDir+0x1a>
 614:	83 30       	cpi	r24, 0x03	; 3
 616:	41 f4       	brne	.+16     	; 0x628 <DIO_VoidSetPortDir+0x20>
 618:	06 c0       	rjmp	.+12     	; 0x626 <DIO_VoidSetPortDir+0x1e>
	{
		case DIO_PORTA :
			DDRA = Port_Dir;
 61a:	6a bb       	out	0x1a, r22	; 26
			break;
 61c:	08 95       	ret
		case DIO_PORTB :
			DDRB = Port_Dir;
 61e:	67 bb       	out	0x17, r22	; 23
			break;
 620:	08 95       	ret
		case DIO_PORTC :
			DDRC = Port_Dir;
 622:	64 bb       	out	0x14, r22	; 20
			break;
 624:	08 95       	ret
		case DIO_PORTD :
			DDRD = Port_Dir;
 626:	61 bb       	out	0x11, r22	; 17
 628:	08 95       	ret

0000062a <DIO_VoidWritePort>:
	}
}

void DIO_VoidWritePort(uint8_t Port,uint8_t Port_Val)
{
	switch(Port)
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	49 f0       	breq	.+18     	; 0x640 <DIO_VoidWritePort+0x16>
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	28 f0       	brcs	.+10     	; 0x63c <DIO_VoidWritePort+0x12>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	39 f0       	breq	.+14     	; 0x644 <DIO_VoidWritePort+0x1a>
 636:	83 30       	cpi	r24, 0x03	; 3
 638:	41 f4       	brne	.+16     	; 0x64a <DIO_VoidWritePort+0x20>
 63a:	06 c0       	rjmp	.+12     	; 0x648 <DIO_VoidWritePort+0x1e>
	{
		case DIO_PORTA :
			PORTA = Port_Val;
 63c:	6b bb       	out	0x1b, r22	; 27
			break;
 63e:	08 95       	ret
		case DIO_PORTB :
			PORTB = Port_Val;
 640:	68 bb       	out	0x18, r22	; 24
			break;
 642:	08 95       	ret
		case DIO_PORTC :
			PORTB = Port_Val;
 644:	68 bb       	out	0x18, r22	; 24
			break;
 646:	08 95       	ret
		case DIO_PORTD :
			PORTD = Port_Val;
 648:	62 bb       	out	0x12, r22	; 18
 64a:	08 95       	ret

0000064c <DIO_Uint8ReadPort>:
}

uint8_t DIO_Uint8ReadPort(uint8_t Port)
{
	uint8_t val;
	switch(Port)
 64c:	81 30       	cpi	r24, 0x01	; 1
 64e:	49 f0       	breq	.+18     	; 0x662 <DIO_Uint8ReadPort+0x16>
 650:	81 30       	cpi	r24, 0x01	; 1
 652:	28 f0       	brcs	.+10     	; 0x65e <DIO_Uint8ReadPort+0x12>
 654:	82 30       	cpi	r24, 0x02	; 2
 656:	39 f0       	breq	.+14     	; 0x666 <DIO_Uint8ReadPort+0x1a>
 658:	83 30       	cpi	r24, 0x03	; 3
 65a:	41 f4       	brne	.+16     	; 0x66c <DIO_Uint8ReadPort+0x20>
 65c:	06 c0       	rjmp	.+12     	; 0x66a <DIO_Uint8ReadPort+0x1e>
	{
		case DIO_PORTA :
			val = PINA;
 65e:	99 b3       	in	r25, 0x19	; 25
			break;
 660:	05 c0       	rjmp	.+10     	; 0x66c <DIO_Uint8ReadPort+0x20>
		case DIO_PORTB :
			val = PINB;
 662:	96 b3       	in	r25, 0x16	; 22
			break;
 664:	03 c0       	rjmp	.+6      	; 0x66c <DIO_Uint8ReadPort+0x20>
		case DIO_PORTC :
			val = PINC;
 666:	93 b3       	in	r25, 0x13	; 19
			break;
 668:	01 c0       	rjmp	.+2      	; 0x66c <DIO_Uint8ReadPort+0x20>
		case DIO_PORTD :
			val = PIND;
 66a:	90 b3       	in	r25, 0x10	; 16
			break;
	}
	return val;
}
 66c:	89 2f       	mov	r24, r25
 66e:	08 95       	ret

00000670 <DIO_VoidTogglePort>:

void DIO_VoidTogglePort(uint8_t Port)
{
	switch(Port)
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	59 f0       	breq	.+22     	; 0x68a <DIO_VoidTogglePort+0x1a>
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	28 f0       	brcs	.+10     	; 0x682 <DIO_VoidTogglePort+0x12>
 678:	82 30       	cpi	r24, 0x02	; 2
 67a:	59 f0       	breq	.+22     	; 0x692 <DIO_VoidTogglePort+0x22>
 67c:	83 30       	cpi	r24, 0x03	; 3
 67e:	81 f4       	brne	.+32     	; 0x6a0 <DIO_VoidTogglePort+0x30>
 680:	0c c0       	rjmp	.+24     	; 0x69a <DIO_VoidTogglePort+0x2a>
	{
		case DIO_PORTA :
			PORTA ^= PORT_HIGH;
 682:	8b b3       	in	r24, 0x1b	; 27
 684:	80 95       	com	r24
 686:	8b bb       	out	0x1b, r24	; 27
			break;
 688:	08 95       	ret
		case DIO_PORTB :
			PORTB ^= PORT_HIGH;
 68a:	88 b3       	in	r24, 0x18	; 24
 68c:	80 95       	com	r24
 68e:	88 bb       	out	0x18, r24	; 24
			break;
 690:	08 95       	ret
		case DIO_PORTC :
			PORTC ^= PORT_HIGH;
 692:	85 b3       	in	r24, 0x15	; 21
 694:	80 95       	com	r24
 696:	85 bb       	out	0x15, r24	; 21
			break;
 698:	08 95       	ret
		case DIO_PORTD :
			PORTD ^= PORT_HIGH;
 69a:	82 b3       	in	r24, 0x12	; 18
 69c:	80 95       	com	r24
 69e:	82 bb       	out	0x12, r24	; 18
 6a0:	08 95       	ret

000006a2 <__udivmodqi4>:
 6a2:	99 1b       	sub	r25, r25
 6a4:	79 e0       	ldi	r23, 0x09	; 9
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <__udivmodqi4_ep>

000006a8 <__udivmodqi4_loop>:
 6a8:	99 1f       	adc	r25, r25
 6aa:	96 17       	cp	r25, r22
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <__udivmodqi4_ep>
 6ae:	96 1b       	sub	r25, r22

000006b0 <__udivmodqi4_ep>:
 6b0:	88 1f       	adc	r24, r24
 6b2:	7a 95       	dec	r23
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__udivmodqi4_loop>
 6b6:	80 95       	com	r24
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
